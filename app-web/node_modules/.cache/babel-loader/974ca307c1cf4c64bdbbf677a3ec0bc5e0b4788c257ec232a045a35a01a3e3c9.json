{"ast":null,"code":"import { drawLinkLine, drawLinkTriangle } from \"./Utils\";\nimport { getDistance, getLinkColor, getRandom, getRangeValue, rangeColorToRgb } from \"tsparticles-engine\";\nfunction getLinkKey(ids) {\n  ids.sort((a, b) => a - b);\n  return ids.join(\"_\");\n}\nfunction setLinkFrequency(particles, dictionary) {\n  const key = getLinkKey(particles.map(t => t.id));\n  let res = dictionary.get(key);\n  if (res === undefined) {\n    res = getRandom();\n    dictionary.set(key, res);\n  }\n  return res;\n}\nexport class LinkInstance {\n  constructor(container) {\n    this.container = container;\n    this._freqs = {\n      links: new Map(),\n      triangles: new Map()\n    };\n  }\n  drawParticle(context, particle) {\n    var _a;\n    const pOptions = particle.options;\n    if (!particle.links || particle.links.length <= 0) {\n      return;\n    }\n    const p1Links = particle.links.filter(l => pOptions.links && this.getLinkFrequency(particle, l.destination) <= pOptions.links.frequency);\n    for (const link of p1Links) {\n      this.drawTriangles(pOptions, particle, link, p1Links);\n      if (link.opacity > 0 && ((_a = particle.retina.linksWidth) !== null && _a !== void 0 ? _a : 0) > 0) {\n        this.drawLinkLine(particle, link);\n      }\n    }\n  }\n  async init() {\n    this._freqs.links = new Map();\n    this._freqs.triangles = new Map();\n  }\n  particleCreated(particle) {\n    particle.links = [];\n    if (!particle.options.links) {\n      return;\n    }\n    const ratio = this.container.retina.pixelRatio;\n    particle.retina.linksDistance = particle.options.links.distance * ratio;\n    particle.retina.linksWidth = particle.options.links.width * ratio;\n  }\n  particleDestroyed(particle) {\n    particle.links = [];\n  }\n  drawLinkLine(p1, link) {\n    const container = this.container,\n      options = container.actualOptions,\n      p2 = link.destination,\n      pos1 = p1.getPosition(),\n      pos2 = p2.getPosition();\n    let opacity = link.opacity;\n    container.canvas.draw(ctx => {\n      var _a, _b, _c;\n      if (!p1.options.links) {\n        return;\n      }\n      let colorLine;\n      const twinkle = (_a = p1.options.twinkle) === null || _a === void 0 ? void 0 : _a.lines;\n      if (twinkle === null || twinkle === void 0 ? void 0 : twinkle.enable) {\n        const twinkleFreq = twinkle.frequency,\n          twinkleRgb = rangeColorToRgb(twinkle.color),\n          twinkling = getRandom() < twinkleFreq;\n        if (twinkling && twinkleRgb) {\n          colorLine = twinkleRgb;\n          opacity = getRangeValue(twinkle.opacity);\n        }\n      }\n      if (!colorLine) {\n        const linksOptions = p1.options.links,\n          linkColor = (linksOptions === null || linksOptions === void 0 ? void 0 : linksOptions.id) !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n        colorLine = getLinkColor(p1, p2, linkColor);\n      }\n      if (!colorLine) {\n        return;\n      }\n      const width = (_b = p1.retina.linksWidth) !== null && _b !== void 0 ? _b : 0,\n        maxDistance = (_c = p1.retina.linksDistance) !== null && _c !== void 0 ? _c : 0;\n      drawLinkLine(ctx, width, pos1, pos2, maxDistance, container.canvas.size, p1.options.links.warp, options.backgroundMask.enable, options.backgroundMask.composite, colorLine, opacity, p1.options.links.shadow);\n    });\n  }\n  drawLinkTriangle(p1, link1, link2) {\n    var _a;\n    if (!p1.options.links) {\n      return;\n    }\n    const container = this.container,\n      options = container.actualOptions,\n      p2 = link1.destination,\n      p3 = link2.destination,\n      triangleOptions = p1.options.links.triangles,\n      opacityTriangle = (_a = triangleOptions.opacity) !== null && _a !== void 0 ? _a : (link1.opacity + link2.opacity) / 2;\n    if (opacityTriangle <= 0) {\n      return;\n    }\n    container.canvas.draw(ctx => {\n      var _a;\n      const pos1 = p1.getPosition(),\n        pos2 = p2.getPosition(),\n        pos3 = p3.getPosition(),\n        linksDistance = (_a = p1.retina.linksDistance) !== null && _a !== void 0 ? _a : 0;\n      if (getDistance(pos1, pos2) > linksDistance || getDistance(pos3, pos2) > linksDistance || getDistance(pos3, pos1) > linksDistance) {\n        return;\n      }\n      let colorTriangle = rangeColorToRgb(triangleOptions.color);\n      if (!colorTriangle) {\n        const linksOptions = p1.options.links,\n          linkColor = (linksOptions === null || linksOptions === void 0 ? void 0 : linksOptions.id) !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n        colorTriangle = getLinkColor(p1, p2, linkColor);\n      }\n      if (!colorTriangle) {\n        return;\n      }\n      drawLinkTriangle(ctx, pos1, pos2, pos3, options.backgroundMask.enable, options.backgroundMask.composite, colorTriangle, opacityTriangle);\n    });\n  }\n  drawTriangles(options, p1, link, p1Links) {\n    var _a, _b, _c;\n    const p2 = link.destination;\n    if (!(((_a = options.links) === null || _a === void 0 ? void 0 : _a.triangles.enable) && ((_b = p2.options.links) === null || _b === void 0 ? void 0 : _b.triangles.enable))) {\n      return;\n    }\n    const vertices = (_c = p2.links) === null || _c === void 0 ? void 0 : _c.filter(t => {\n      const linkFreq = this.getLinkFrequency(p2, t.destination);\n      return p2.options.links && linkFreq <= p2.options.links.frequency && p1Links.findIndex(l => l.destination === t.destination) >= 0;\n    });\n    if (!(vertices === null || vertices === void 0 ? void 0 : vertices.length)) {\n      return;\n    }\n    for (const vertex of vertices) {\n      const p3 = vertex.destination,\n        triangleFreq = this.getTriangleFrequency(p1, p2, p3);\n      if (triangleFreq > options.links.triangles.frequency) {\n        continue;\n      }\n      this.drawLinkTriangle(p1, link, vertex);\n    }\n  }\n  getLinkFrequency(p1, p2) {\n    return setLinkFrequency([p1, p2], this._freqs.links);\n  }\n  getTriangleFrequency(p1, p2, p3) {\n    return setLinkFrequency([p1, p2, p3], this._freqs.triangles);\n  }\n}","map":{"version":3,"names":["drawLinkLine","drawLinkTriangle","getDistance","getLinkColor","getRandom","getRangeValue","rangeColorToRgb","getLinkKey","ids","sort","a","b","join","setLinkFrequency","particles","dictionary","key","map","t","id","res","get","undefined","set","LinkInstance","constructor","container","_freqs","links","Map","triangles","drawParticle","context","particle","_a","pOptions","options","length","p1Links","filter","l","getLinkFrequency","destination","frequency","link","drawTriangles","opacity","retina","linksWidth","init","particleCreated","ratio","pixelRatio","linksDistance","distance","width","particleDestroyed","p1","actualOptions","p2","pos1","getPosition","pos2","canvas","draw","ctx","_b","_c","colorLine","twinkle","lines","enable","twinkleFreq","twinkleRgb","color","twinkling","linksOptions","linkColor","linksColors","linksColor","maxDistance","size","warp","backgroundMask","composite","shadow","link1","link2","p3","triangleOptions","opacityTriangle","pos3","colorTriangle","vertices","linkFreq","findIndex","vertex","triangleFreq","getTriangleFrequency"],"sources":["/Users/adri22/Desktop/AVA-Bot/app-web/node_modules/tsparticles-interaction-particles-links/esm/LinkInstance.js"],"sourcesContent":["import { drawLinkLine, drawLinkTriangle } from \"./Utils\";\nimport { getDistance, getLinkColor, getRandom, getRangeValue, rangeColorToRgb } from \"tsparticles-engine\";\nfunction getLinkKey(ids) {\n    ids.sort((a, b) => a - b);\n    return ids.join(\"_\");\n}\nfunction setLinkFrequency(particles, dictionary) {\n    const key = getLinkKey(particles.map((t) => t.id));\n    let res = dictionary.get(key);\n    if (res === undefined) {\n        res = getRandom();\n        dictionary.set(key, res);\n    }\n    return res;\n}\nexport class LinkInstance {\n    constructor(container) {\n        this.container = container;\n        this._freqs = {\n            links: new Map(),\n            triangles: new Map(),\n        };\n    }\n    drawParticle(context, particle) {\n        var _a;\n        const pOptions = particle.options;\n        if (!particle.links || particle.links.length <= 0) {\n            return;\n        }\n        const p1Links = particle.links.filter((l) => pOptions.links && this.getLinkFrequency(particle, l.destination) <= pOptions.links.frequency);\n        for (const link of p1Links) {\n            this.drawTriangles(pOptions, particle, link, p1Links);\n            if (link.opacity > 0 && ((_a = particle.retina.linksWidth) !== null && _a !== void 0 ? _a : 0) > 0) {\n                this.drawLinkLine(particle, link);\n            }\n        }\n    }\n    async init() {\n        this._freqs.links = new Map();\n        this._freqs.triangles = new Map();\n    }\n    particleCreated(particle) {\n        particle.links = [];\n        if (!particle.options.links) {\n            return;\n        }\n        const ratio = this.container.retina.pixelRatio;\n        particle.retina.linksDistance = particle.options.links.distance * ratio;\n        particle.retina.linksWidth = particle.options.links.width * ratio;\n    }\n    particleDestroyed(particle) {\n        particle.links = [];\n    }\n    drawLinkLine(p1, link) {\n        const container = this.container, options = container.actualOptions, p2 = link.destination, pos1 = p1.getPosition(), pos2 = p2.getPosition();\n        let opacity = link.opacity;\n        container.canvas.draw((ctx) => {\n            var _a, _b, _c;\n            if (!p1.options.links) {\n                return;\n            }\n            let colorLine;\n            const twinkle = (_a = p1.options.twinkle) === null || _a === void 0 ? void 0 : _a.lines;\n            if (twinkle === null || twinkle === void 0 ? void 0 : twinkle.enable) {\n                const twinkleFreq = twinkle.frequency, twinkleRgb = rangeColorToRgb(twinkle.color), twinkling = getRandom() < twinkleFreq;\n                if (twinkling && twinkleRgb) {\n                    colorLine = twinkleRgb;\n                    opacity = getRangeValue(twinkle.opacity);\n                }\n            }\n            if (!colorLine) {\n                const linksOptions = p1.options.links, linkColor = (linksOptions === null || linksOptions === void 0 ? void 0 : linksOptions.id) !== undefined\n                    ? container.particles.linksColors.get(linksOptions.id)\n                    : container.particles.linksColor;\n                colorLine = getLinkColor(p1, p2, linkColor);\n            }\n            if (!colorLine) {\n                return;\n            }\n            const width = (_b = p1.retina.linksWidth) !== null && _b !== void 0 ? _b : 0, maxDistance = (_c = p1.retina.linksDistance) !== null && _c !== void 0 ? _c : 0;\n            drawLinkLine(ctx, width, pos1, pos2, maxDistance, container.canvas.size, p1.options.links.warp, options.backgroundMask.enable, options.backgroundMask.composite, colorLine, opacity, p1.options.links.shadow);\n        });\n    }\n    drawLinkTriangle(p1, link1, link2) {\n        var _a;\n        if (!p1.options.links) {\n            return;\n        }\n        const container = this.container, options = container.actualOptions, p2 = link1.destination, p3 = link2.destination, triangleOptions = p1.options.links.triangles, opacityTriangle = (_a = triangleOptions.opacity) !== null && _a !== void 0 ? _a : (link1.opacity + link2.opacity) / 2;\n        if (opacityTriangle <= 0) {\n            return;\n        }\n        container.canvas.draw((ctx) => {\n            var _a;\n            const pos1 = p1.getPosition(), pos2 = p2.getPosition(), pos3 = p3.getPosition(), linksDistance = (_a = p1.retina.linksDistance) !== null && _a !== void 0 ? _a : 0;\n            if (getDistance(pos1, pos2) > linksDistance ||\n                getDistance(pos3, pos2) > linksDistance ||\n                getDistance(pos3, pos1) > linksDistance) {\n                return;\n            }\n            let colorTriangle = rangeColorToRgb(triangleOptions.color);\n            if (!colorTriangle) {\n                const linksOptions = p1.options.links, linkColor = (linksOptions === null || linksOptions === void 0 ? void 0 : linksOptions.id) !== undefined\n                    ? container.particles.linksColors.get(linksOptions.id)\n                    : container.particles.linksColor;\n                colorTriangle = getLinkColor(p1, p2, linkColor);\n            }\n            if (!colorTriangle) {\n                return;\n            }\n            drawLinkTriangle(ctx, pos1, pos2, pos3, options.backgroundMask.enable, options.backgroundMask.composite, colorTriangle, opacityTriangle);\n        });\n    }\n    drawTriangles(options, p1, link, p1Links) {\n        var _a, _b, _c;\n        const p2 = link.destination;\n        if (!(((_a = options.links) === null || _a === void 0 ? void 0 : _a.triangles.enable) && ((_b = p2.options.links) === null || _b === void 0 ? void 0 : _b.triangles.enable))) {\n            return;\n        }\n        const vertices = (_c = p2.links) === null || _c === void 0 ? void 0 : _c.filter((t) => {\n            const linkFreq = this.getLinkFrequency(p2, t.destination);\n            return (p2.options.links &&\n                linkFreq <= p2.options.links.frequency &&\n                p1Links.findIndex((l) => l.destination === t.destination) >= 0);\n        });\n        if (!(vertices === null || vertices === void 0 ? void 0 : vertices.length)) {\n            return;\n        }\n        for (const vertex of vertices) {\n            const p3 = vertex.destination, triangleFreq = this.getTriangleFrequency(p1, p2, p3);\n            if (triangleFreq > options.links.triangles.frequency) {\n                continue;\n            }\n            this.drawLinkTriangle(p1, link, vertex);\n        }\n    }\n    getLinkFrequency(p1, p2) {\n        return setLinkFrequency([p1, p2], this._freqs.links);\n    }\n    getTriangleFrequency(p1, p2, p3) {\n        return setLinkFrequency([p1, p2, p3], this._freqs.triangles);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}