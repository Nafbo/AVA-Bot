{"ast":null,"code":"import { getDistance, getRangeMax, getRangeValue } from \"tsparticles-engine\";\nimport { applyDistance, applyPath, getProximitySpeedFactor, spin } from \"./Utils\";\nexport class BaseMover {\n  init(particle) {\n    var _a;\n    const container = particle.container,\n      options = particle.options,\n      gravityOptions = options.move.gravity,\n      spinOptions = options.move.spin;\n    particle.gravity = {\n      enable: gravityOptions.enable,\n      acceleration: getRangeValue(gravityOptions.acceleration),\n      inverse: gravityOptions.inverse\n    };\n    if (spinOptions.enable) {\n      const spinPos = (_a = spinOptions.position) !== null && _a !== void 0 ? _a : {\n          x: 50,\n          y: 50\n        },\n        spinCenter = {\n          x: spinPos.x / 100 * container.canvas.size.width,\n          y: spinPos.y / 100 * container.canvas.size.height\n        },\n        pos = particle.getPosition(),\n        distance = getDistance(pos, spinCenter),\n        spinAcceleration = getRangeValue(spinOptions.acceleration);\n      particle.retina.spinAcceleration = spinAcceleration * container.retina.pixelRatio;\n      particle.spin = {\n        center: spinCenter,\n        direction: particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\",\n        angle: particle.velocity.angle,\n        radius: distance,\n        acceleration: particle.retina.spinAcceleration\n      };\n    }\n  }\n  isEnabled(particle) {\n    return !particle.destroyed && particle.options.move.enable;\n  }\n  move(particle, delta) {\n    var _a, _b, _c;\n    var _d, _e;\n    const particleOptions = particle.options,\n      moveOptions = particleOptions.move;\n    if (!moveOptions.enable) {\n      return;\n    }\n    const container = particle.container,\n      slowFactor = getProximitySpeedFactor(particle),\n      baseSpeed = ((_a = (_d = particle.retina).moveSpeed) !== null && _a !== void 0 ? _a : _d.moveSpeed = getRangeValue(moveOptions.speed) * container.retina.pixelRatio) * container.retina.reduceFactor,\n      moveDrift = (_b = (_e = particle.retina).moveDrift) !== null && _b !== void 0 ? _b : _e.moveDrift = getRangeValue(particle.options.move.drift) * container.retina.pixelRatio,\n      maxSize = getRangeMax(particleOptions.size.value) * container.retina.pixelRatio,\n      sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1,\n      speedFactor = sizeFactor * slowFactor * (delta.factor || 1),\n      diffFactor = 2,\n      moveSpeed = baseSpeed * speedFactor / diffFactor;\n    if (moveOptions.spin.enable) {\n      spin(particle, moveSpeed);\n    } else {\n      applyPath(particle, delta);\n      const gravityOptions = particle.gravity,\n        gravityFactor = (gravityOptions === null || gravityOptions === void 0 ? void 0 : gravityOptions.enable) && gravityOptions.inverse ? -1 : 1;\n      if ((gravityOptions === null || gravityOptions === void 0 ? void 0 : gravityOptions.enable) && moveSpeed) {\n        particle.velocity.y += gravityFactor * (gravityOptions.acceleration * delta.factor) / (60 * moveSpeed);\n      }\n      if (moveDrift && moveSpeed) {\n        particle.velocity.x += moveDrift * delta.factor / (60 * moveSpeed);\n      }\n      const decay = particle.moveDecay;\n      if (decay != 1) {\n        particle.velocity.multTo(decay);\n      }\n      const velocity = particle.velocity.mult(moveSpeed),\n        maxSpeed = (_c = particle.retina.maxSpeed) !== null && _c !== void 0 ? _c : container.retina.maxSpeed;\n      if ((gravityOptions === null || gravityOptions === void 0 ? void 0 : gravityOptions.enable) && maxSpeed > 0 && (!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed || gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed)) {\n        velocity.y = gravityFactor * maxSpeed;\n        if (moveSpeed) {\n          particle.velocity.y = velocity.y / moveSpeed;\n        }\n      }\n      const zIndexOptions = particle.options.zIndex,\n        zVelocityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.velocityRate;\n      if (zVelocityFactor != 1) {\n        velocity.multTo(zVelocityFactor);\n      }\n      particle.position.addTo(velocity);\n      if (moveOptions.vibrate) {\n        particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n        particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n      }\n    }\n    applyDistance(particle);\n  }\n}","map":{"version":3,"names":["getDistance","getRangeMax","getRangeValue","applyDistance","applyPath","getProximitySpeedFactor","spin","BaseMover","init","particle","_a","container","options","gravityOptions","move","gravity","spinOptions","enable","acceleration","inverse","spinPos","position","x","y","spinCenter","canvas","size","width","height","pos","getPosition","distance","spinAcceleration","retina","pixelRatio","center","direction","velocity","angle","radius","isEnabled","destroyed","delta","_b","_c","_d","_e","particleOptions","moveOptions","slowFactor","baseSpeed","moveSpeed","speed","reduceFactor","moveDrift","drift","maxSize","value","sizeFactor","getRadius","speedFactor","factor","diffFactor","gravityFactor","decay","moveDecay","multTo","mult","maxSpeed","zIndexOptions","zIndex","zVelocityFactor","zIndexFactor","velocityRate","addTo","vibrate","Math","sin","cos"],"sources":["/Users/adri22/Desktop/AVA-Bot/app-web/node_modules/tsparticles-move-base/esm/BaseMover.js"],"sourcesContent":["import { getDistance, getRangeMax, getRangeValue } from \"tsparticles-engine\";\nimport { applyDistance, applyPath, getProximitySpeedFactor, spin } from \"./Utils\";\nexport class BaseMover {\n    init(particle) {\n        var _a;\n        const container = particle.container, options = particle.options, gravityOptions = options.move.gravity, spinOptions = options.move.spin;\n        particle.gravity = {\n            enable: gravityOptions.enable,\n            acceleration: getRangeValue(gravityOptions.acceleration),\n            inverse: gravityOptions.inverse,\n        };\n        if (spinOptions.enable) {\n            const spinPos = (_a = spinOptions.position) !== null && _a !== void 0 ? _a : { x: 50, y: 50 }, spinCenter = {\n                x: (spinPos.x / 100) * container.canvas.size.width,\n                y: (spinPos.y / 100) * container.canvas.size.height,\n            }, pos = particle.getPosition(), distance = getDistance(pos, spinCenter), spinAcceleration = getRangeValue(spinOptions.acceleration);\n            particle.retina.spinAcceleration = spinAcceleration * container.retina.pixelRatio;\n            particle.spin = {\n                center: spinCenter,\n                direction: particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\",\n                angle: particle.velocity.angle,\n                radius: distance,\n                acceleration: particle.retina.spinAcceleration,\n            };\n        }\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && particle.options.move.enable;\n    }\n    move(particle, delta) {\n        var _a, _b, _c;\n        var _d, _e;\n        const particleOptions = particle.options, moveOptions = particleOptions.move;\n        if (!moveOptions.enable) {\n            return;\n        }\n        const container = particle.container, slowFactor = getProximitySpeedFactor(particle), baseSpeed = ((_a = (_d = particle.retina).moveSpeed) !== null && _a !== void 0 ? _a : (_d.moveSpeed = getRangeValue(moveOptions.speed) * container.retina.pixelRatio)) *\n            container.retina.reduceFactor, moveDrift = ((_b = (_e = particle.retina).moveDrift) !== null && _b !== void 0 ? _b : (_e.moveDrift = getRangeValue(particle.options.move.drift) * container.retina.pixelRatio)), maxSize = getRangeMax(particleOptions.size.value) * container.retina.pixelRatio, sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1, speedFactor = sizeFactor * slowFactor * (delta.factor || 1), diffFactor = 2, moveSpeed = (baseSpeed * speedFactor) / diffFactor;\n        if (moveOptions.spin.enable) {\n            spin(particle, moveSpeed);\n        }\n        else {\n            applyPath(particle, delta);\n            const gravityOptions = particle.gravity, gravityFactor = (gravityOptions === null || gravityOptions === void 0 ? void 0 : gravityOptions.enable) && gravityOptions.inverse ? -1 : 1;\n            if ((gravityOptions === null || gravityOptions === void 0 ? void 0 : gravityOptions.enable) && moveSpeed) {\n                particle.velocity.y +=\n                    (gravityFactor * (gravityOptions.acceleration * delta.factor)) / (60 * moveSpeed);\n            }\n            if (moveDrift && moveSpeed) {\n                particle.velocity.x += (moveDrift * delta.factor) / (60 * moveSpeed);\n            }\n            const decay = particle.moveDecay;\n            if (decay != 1) {\n                particle.velocity.multTo(decay);\n            }\n            const velocity = particle.velocity.mult(moveSpeed), maxSpeed = (_c = particle.retina.maxSpeed) !== null && _c !== void 0 ? _c : container.retina.maxSpeed;\n            if ((gravityOptions === null || gravityOptions === void 0 ? void 0 : gravityOptions.enable) &&\n                maxSpeed > 0 &&\n                ((!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed) ||\n                    (gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed))) {\n                velocity.y = gravityFactor * maxSpeed;\n                if (moveSpeed) {\n                    particle.velocity.y = velocity.y / moveSpeed;\n                }\n            }\n            const zIndexOptions = particle.options.zIndex, zVelocityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.velocityRate;\n            if (zVelocityFactor != 1) {\n                velocity.multTo(zVelocityFactor);\n            }\n            particle.position.addTo(velocity);\n            if (moveOptions.vibrate) {\n                particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n                particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n            }\n        }\n        applyDistance(particle);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}