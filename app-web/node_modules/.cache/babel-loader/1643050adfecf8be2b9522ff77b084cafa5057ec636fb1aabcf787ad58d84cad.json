{"ast":null,"code":"import { arrayRandomIndex, executeOnSingleOrMultiple, itemFromArray } from \"tsparticles-engine\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { EmitterInstance } from \"./EmitterInstance\";\nexport class Emitters {\n  constructor(engine, container) {\n    this.container = container;\n    this._engine = engine;\n    this.array = [];\n    this.emitters = [];\n    this.interactivityEmitters = {\n      random: {\n        count: 1,\n        enable: false\n      },\n      value: []\n    };\n    container.getEmitter = idxOrName => idxOrName === undefined || typeof idxOrName === \"number\" ? this.array[idxOrName || 0] : this.array.find(t => t.name === idxOrName);\n    container.addEmitter = (options, position) => this.addEmitter(options, position);\n    container.removeEmitter = idxOrName => {\n      const emitter = container.getEmitter(idxOrName);\n      if (emitter) {\n        this.removeEmitter(emitter);\n      }\n    };\n    container.playEmitter = idxOrName => {\n      const emitter = container.getEmitter(idxOrName);\n      if (emitter) {\n        emitter.externalPlay();\n      }\n    };\n    container.pauseEmitter = idxOrName => {\n      const emitter = container.getEmitter(idxOrName);\n      if (emitter) {\n        emitter.externalPause();\n      }\n    };\n  }\n  addEmitter(options, position) {\n    const emitterOptions = new Emitter();\n    emitterOptions.load(options);\n    const emitter = new EmitterInstance(this._engine, this, this.container, emitterOptions, position);\n    this.array.push(emitter);\n    return emitter;\n  }\n  handleClickMode(mode) {\n    const emitterOptions = this.emitters,\n      modeEmitters = this.interactivityEmitters;\n    if (mode !== \"emitter\") {\n      return;\n    }\n    let emittersModeOptions;\n    if (modeEmitters && modeEmitters.value instanceof Array) {\n      if (modeEmitters.value.length > 0 && modeEmitters.random.enable) {\n        emittersModeOptions = [];\n        const usedIndexes = [];\n        for (let i = 0; i < modeEmitters.random.count; i++) {\n          const idx = arrayRandomIndex(modeEmitters.value);\n          if (usedIndexes.includes(idx) && usedIndexes.length < modeEmitters.value.length) {\n            i--;\n            continue;\n          }\n          usedIndexes.push(idx);\n          emittersModeOptions.push(itemFromArray(modeEmitters.value, idx));\n        }\n      } else {\n        emittersModeOptions = modeEmitters.value;\n      }\n    } else {\n      emittersModeOptions = modeEmitters === null || modeEmitters === void 0 ? void 0 : modeEmitters.value;\n    }\n    const emittersOptions = emittersModeOptions !== null && emittersModeOptions !== void 0 ? emittersModeOptions : emitterOptions,\n      ePosition = this.container.interactivity.mouse.clickPosition;\n    executeOnSingleOrMultiple(emittersOptions, emitter => {\n      this.addEmitter(emitter, ePosition);\n    });\n  }\n  async init() {\n    this.emitters = this.container.actualOptions.emitters;\n    this.interactivityEmitters = this.container.actualOptions.interactivity.modes.emitters;\n    if (!this.emitters) {\n      return;\n    }\n    if (this.emitters instanceof Array) {\n      for (const emitterOptions of this.emitters) {\n        this.addEmitter(emitterOptions);\n      }\n    } else {\n      this.addEmitter(this.emitters);\n    }\n  }\n  pause() {\n    for (const emitter of this.array) {\n      emitter.pause();\n    }\n  }\n  play() {\n    for (const emitter of this.array) {\n      emitter.play();\n    }\n  }\n  removeEmitter(emitter) {\n    const index = this.array.indexOf(emitter);\n    if (index >= 0) {\n      this.array.splice(index, 1);\n    }\n  }\n  resize() {\n    for (const emitter of this.array) {\n      emitter.resize();\n    }\n  }\n  stop() {\n    this.array = [];\n  }\n  update(delta) {\n    for (const emitter of this.array) {\n      emitter.update(delta);\n    }\n  }\n}","map":{"version":3,"names":["arrayRandomIndex","executeOnSingleOrMultiple","itemFromArray","Emitter","EmitterInstance","Emitters","constructor","engine","container","_engine","array","emitters","interactivityEmitters","random","count","enable","value","getEmitter","idxOrName","undefined","find","t","name","addEmitter","options","position","removeEmitter","emitter","playEmitter","externalPlay","pauseEmitter","externalPause","emitterOptions","load","push","handleClickMode","mode","modeEmitters","emittersModeOptions","Array","length","usedIndexes","i","idx","includes","emittersOptions","ePosition","interactivity","mouse","clickPosition","init","actualOptions","modes","pause","play","index","indexOf","splice","resize","stop","update","delta"],"sources":["/Users/adri22/Desktop/AVA-Bot/app-web/node_modules/tsparticles-plugin-emitters/esm/Emitters.js"],"sourcesContent":["import { arrayRandomIndex, executeOnSingleOrMultiple, itemFromArray } from \"tsparticles-engine\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { EmitterInstance } from \"./EmitterInstance\";\nexport class Emitters {\n    constructor(engine, container) {\n        this.container = container;\n        this._engine = engine;\n        this.array = [];\n        this.emitters = [];\n        this.interactivityEmitters = {\n            random: {\n                count: 1,\n                enable: false,\n            },\n            value: [],\n        };\n        container.getEmitter = (idxOrName) => idxOrName === undefined || typeof idxOrName === \"number\"\n            ? this.array[idxOrName || 0]\n            : this.array.find((t) => t.name === idxOrName);\n        container.addEmitter = (options, position) => this.addEmitter(options, position);\n        container.removeEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                this.removeEmitter(emitter);\n            }\n        };\n        container.playEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                emitter.externalPlay();\n            }\n        };\n        container.pauseEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                emitter.externalPause();\n            }\n        };\n    }\n    addEmitter(options, position) {\n        const emitterOptions = new Emitter();\n        emitterOptions.load(options);\n        const emitter = new EmitterInstance(this._engine, this, this.container, emitterOptions, position);\n        this.array.push(emitter);\n        return emitter;\n    }\n    handleClickMode(mode) {\n        const emitterOptions = this.emitters, modeEmitters = this.interactivityEmitters;\n        if (mode !== \"emitter\") {\n            return;\n        }\n        let emittersModeOptions;\n        if (modeEmitters && modeEmitters.value instanceof Array) {\n            if (modeEmitters.value.length > 0 && modeEmitters.random.enable) {\n                emittersModeOptions = [];\n                const usedIndexes = [];\n                for (let i = 0; i < modeEmitters.random.count; i++) {\n                    const idx = arrayRandomIndex(modeEmitters.value);\n                    if (usedIndexes.includes(idx) && usedIndexes.length < modeEmitters.value.length) {\n                        i--;\n                        continue;\n                    }\n                    usedIndexes.push(idx);\n                    emittersModeOptions.push(itemFromArray(modeEmitters.value, idx));\n                }\n            }\n            else {\n                emittersModeOptions = modeEmitters.value;\n            }\n        }\n        else {\n            emittersModeOptions = modeEmitters === null || modeEmitters === void 0 ? void 0 : modeEmitters.value;\n        }\n        const emittersOptions = emittersModeOptions !== null && emittersModeOptions !== void 0 ? emittersModeOptions : emitterOptions, ePosition = this.container.interactivity.mouse.clickPosition;\n        executeOnSingleOrMultiple(emittersOptions, (emitter) => {\n            this.addEmitter(emitter, ePosition);\n        });\n    }\n    async init() {\n        this.emitters = this.container.actualOptions.emitters;\n        this.interactivityEmitters = this.container.actualOptions.interactivity.modes.emitters;\n        if (!this.emitters) {\n            return;\n        }\n        if (this.emitters instanceof Array) {\n            for (const emitterOptions of this.emitters) {\n                this.addEmitter(emitterOptions);\n            }\n        }\n        else {\n            this.addEmitter(this.emitters);\n        }\n    }\n    pause() {\n        for (const emitter of this.array) {\n            emitter.pause();\n        }\n    }\n    play() {\n        for (const emitter of this.array) {\n            emitter.play();\n        }\n    }\n    removeEmitter(emitter) {\n        const index = this.array.indexOf(emitter);\n        if (index >= 0) {\n            this.array.splice(index, 1);\n        }\n    }\n    resize() {\n        for (const emitter of this.array) {\n            emitter.resize();\n        }\n    }\n    stop() {\n        this.array = [];\n    }\n    update(delta) {\n        for (const emitter of this.array) {\n            emitter.update(delta);\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}