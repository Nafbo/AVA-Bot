{"ast":null,"code":"import { getRandom, getRangeValue, rangeColorToHsl } from \"tsparticles-engine\";\nimport { Roll } from \"./Options/Classes/Roll\";\nfunction updateRoll(particle, delta) {\n  const roll = particle.options.roll;\n  if (!particle.roll || !(roll === null || roll === void 0 ? void 0 : roll.enable)) {\n    return;\n  }\n  const speed = particle.roll.speed * delta.factor,\n    max = 2 * Math.PI;\n  particle.roll.angle += speed;\n  if (particle.roll.angle > max) {\n    particle.roll.angle -= max;\n  }\n}\nexport class RollUpdater {\n  getTransformValues(particle) {\n    var _a;\n    const roll = ((_a = particle.roll) === null || _a === void 0 ? void 0 : _a.enable) && particle.roll,\n      rollHorizontal = roll && roll.horizontal,\n      rollVertical = roll && roll.vertical;\n    return {\n      a: rollHorizontal ? Math.cos(roll.angle) : undefined,\n      d: rollVertical ? Math.sin(roll.angle) : undefined\n    };\n  }\n  init(particle) {\n    const rollOpt = particle.options.roll;\n    if (rollOpt === null || rollOpt === void 0 ? void 0 : rollOpt.enable) {\n      particle.roll = {\n        enable: rollOpt.enable,\n        horizontal: rollOpt.mode === \"horizontal\" || rollOpt.mode === \"both\",\n        vertical: rollOpt.mode === \"vertical\" || rollOpt.mode === \"both\",\n        angle: getRandom() * Math.PI * 2,\n        speed: getRangeValue(rollOpt.speed) / 360\n      };\n      if (rollOpt.backColor) {\n        particle.backColor = rangeColorToHsl(rollOpt.backColor);\n      } else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n        const alterType = getRandom() >= 0.5 ? \"darken\" : \"enlighten\";\n        particle.roll.alter = {\n          type: alterType,\n          value: getRangeValue(alterType === \"darken\" ? rollOpt.darken.value : rollOpt.enlighten.value)\n        };\n      } else if (rollOpt.darken.enable) {\n        particle.roll.alter = {\n          type: \"darken\",\n          value: getRangeValue(rollOpt.darken.value)\n        };\n      } else if (rollOpt.enlighten.enable) {\n        particle.roll.alter = {\n          type: \"enlighten\",\n          value: getRangeValue(rollOpt.enlighten.value)\n        };\n      }\n    } else {\n      particle.roll = {\n        enable: false,\n        horizontal: false,\n        vertical: false,\n        angle: 0,\n        speed: 0\n      };\n    }\n  }\n  isEnabled(particle) {\n    const roll = particle.options.roll;\n    return !particle.destroyed && !particle.spawning && !!(roll === null || roll === void 0 ? void 0 : roll.enable);\n  }\n  loadOptions(options) {\n    if (!options.roll) {\n      options.roll = new Roll();\n    }\n    for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      sources[_key - 1] = arguments[_key];\n    }\n    for (const source of sources) {\n      options.roll.load(source === null || source === void 0 ? void 0 : source.roll);\n    }\n  }\n  update(particle, delta) {\n    if (!this.isEnabled(particle)) {\n      return;\n    }\n    updateRoll(particle, delta);\n  }\n}","map":{"version":3,"names":["getRandom","getRangeValue","rangeColorToHsl","Roll","updateRoll","particle","delta","roll","options","enable","speed","factor","max","Math","PI","angle","RollUpdater","getTransformValues","_a","rollHorizontal","horizontal","rollVertical","vertical","a","cos","undefined","d","sin","init","rollOpt","mode","backColor","darken","enlighten","alterType","alter","type","value","isEnabled","destroyed","spawning","loadOptions","_len","arguments","length","sources","Array","_key","source","load","update"],"sources":["/Users/adri22/Desktop/AVA-Bot/app-web/node_modules/tsparticles-updater-roll/esm/RollUpdater.js"],"sourcesContent":["import { getRandom, getRangeValue, rangeColorToHsl } from \"tsparticles-engine\";\nimport { Roll } from \"./Options/Classes/Roll\";\nfunction updateRoll(particle, delta) {\n    const roll = particle.options.roll;\n    if (!particle.roll || !(roll === null || roll === void 0 ? void 0 : roll.enable)) {\n        return;\n    }\n    const speed = particle.roll.speed * delta.factor, max = 2 * Math.PI;\n    particle.roll.angle += speed;\n    if (particle.roll.angle > max) {\n        particle.roll.angle -= max;\n    }\n}\nexport class RollUpdater {\n    getTransformValues(particle) {\n        var _a;\n        const roll = ((_a = particle.roll) === null || _a === void 0 ? void 0 : _a.enable) && particle.roll, rollHorizontal = roll && roll.horizontal, rollVertical = roll && roll.vertical;\n        return {\n            a: rollHorizontal ? Math.cos(roll.angle) : undefined,\n            d: rollVertical ? Math.sin(roll.angle) : undefined,\n        };\n    }\n    init(particle) {\n        const rollOpt = particle.options.roll;\n        if (rollOpt === null || rollOpt === void 0 ? void 0 : rollOpt.enable) {\n            particle.roll = {\n                enable: rollOpt.enable,\n                horizontal: rollOpt.mode === \"horizontal\" || rollOpt.mode === \"both\",\n                vertical: rollOpt.mode === \"vertical\" || rollOpt.mode === \"both\",\n                angle: getRandom() * Math.PI * 2,\n                speed: getRangeValue(rollOpt.speed) / 360,\n            };\n            if (rollOpt.backColor) {\n                particle.backColor = rangeColorToHsl(rollOpt.backColor);\n            }\n            else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n                const alterType = getRandom() >= 0.5 ? \"darken\" : \"enlighten\";\n                particle.roll.alter = {\n                    type: alterType,\n                    value: getRangeValue(alterType === \"darken\" ? rollOpt.darken.value : rollOpt.enlighten.value),\n                };\n            }\n            else if (rollOpt.darken.enable) {\n                particle.roll.alter = {\n                    type: \"darken\",\n                    value: getRangeValue(rollOpt.darken.value),\n                };\n            }\n            else if (rollOpt.enlighten.enable) {\n                particle.roll.alter = {\n                    type: \"enlighten\",\n                    value: getRangeValue(rollOpt.enlighten.value),\n                };\n            }\n        }\n        else {\n            particle.roll = {\n                enable: false,\n                horizontal: false,\n                vertical: false,\n                angle: 0,\n                speed: 0,\n            };\n        }\n    }\n    isEnabled(particle) {\n        const roll = particle.options.roll;\n        return !particle.destroyed && !particle.spawning && !!(roll === null || roll === void 0 ? void 0 : roll.enable);\n    }\n    loadOptions(options, ...sources) {\n        if (!options.roll) {\n            options.roll = new Roll();\n        }\n        for (const source of sources) {\n            options.roll.load(source === null || source === void 0 ? void 0 : source.roll);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateRoll(particle, delta);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}