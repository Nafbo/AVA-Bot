{"ast":null,"code":"import { clamp, getDistances, getRandom } from \"tsparticles-engine\";\nexport function applyDistance(particle) {\n  const initialPosition = particle.initialPosition,\n    {\n      dx,\n      dy\n    } = getDistances(initialPosition, particle.position),\n    dxFixed = Math.abs(dx),\n    dyFixed = Math.abs(dy),\n    hDistance = particle.retina.maxDistance.horizontal,\n    vDistance = particle.retina.maxDistance.vertical;\n  if (!hDistance && !vDistance) {\n    return;\n  }\n  if ((hDistance && dxFixed >= hDistance || vDistance && dyFixed >= vDistance) && !particle.misplaced) {\n    particle.misplaced = !!hDistance && dxFixed > hDistance || !!vDistance && dyFixed > vDistance;\n    if (hDistance) {\n      particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n    }\n    if (vDistance) {\n      particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n    }\n  } else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n    particle.misplaced = false;\n  } else if (particle.misplaced) {\n    const pos = particle.position,\n      vel = particle.velocity;\n    if (hDistance && (pos.x < initialPosition.x && vel.x < 0 || pos.x > initialPosition.x && vel.x > 0)) {\n      vel.x *= -getRandom();\n    }\n    if (vDistance && (pos.y < initialPosition.y && vel.y < 0 || pos.y > initialPosition.y && vel.y > 0)) {\n      vel.y *= -getRandom();\n    }\n  }\n}\nexport function spin(particle, moveSpeed) {\n  const container = particle.container;\n  if (!particle.spin) {\n    return;\n  }\n  const updateFunc = {\n    x: particle.spin.direction === \"clockwise\" ? Math.cos : Math.sin,\n    y: particle.spin.direction === \"clockwise\" ? Math.sin : Math.cos\n  };\n  particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\n  particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\n  particle.spin.radius += particle.spin.acceleration;\n  const maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height);\n  if (particle.spin.radius > maxCanvasSize / 2) {\n    particle.spin.radius = maxCanvasSize / 2;\n    particle.spin.acceleration *= -1;\n  } else if (particle.spin.radius < 0) {\n    particle.spin.radius = 0;\n    particle.spin.acceleration *= -1;\n  }\n  particle.spin.angle += moveSpeed / 100 * (1 - particle.spin.radius / maxCanvasSize);\n}\nexport function applyPath(particle, delta) {\n  var _a;\n  const particlesOptions = particle.options,\n    pathOptions = particlesOptions.move.path,\n    pathEnabled = pathOptions.enable;\n  if (!pathEnabled) {\n    return;\n  }\n  if (particle.lastPathTime <= particle.pathDelay) {\n    particle.lastPathTime += delta.value;\n    return;\n  }\n  const path = (_a = particle.pathGenerator) === null || _a === void 0 ? void 0 : _a.generate(particle);\n  if (path) {\n    particle.velocity.addTo(path);\n  }\n  if (pathOptions.clamp) {\n    particle.velocity.x = clamp(particle.velocity.x, -1, 1);\n    particle.velocity.y = clamp(particle.velocity.y, -1, 1);\n  }\n  particle.lastPathTime -= particle.pathDelay;\n}\nexport function getProximitySpeedFactor(particle) {\n  return particle.slow.inRange ? particle.slow.factor : 1;\n}","map":{"version":3,"names":["clamp","getDistances","getRandom","applyDistance","particle","initialPosition","dx","dy","position","dxFixed","Math","abs","dyFixed","hDistance","retina","maxDistance","horizontal","vDistance","vertical","misplaced","velocity","x","y","pos","vel","spin","moveSpeed","container","updateFunc","direction","cos","sin","center","radius","angle","acceleration","maxCanvasSize","max","canvas","size","width","height","applyPath","delta","_a","particlesOptions","options","pathOptions","move","path","pathEnabled","enable","lastPathTime","pathDelay","value","pathGenerator","generate","addTo","getProximitySpeedFactor","slow","inRange","factor"],"sources":["/Users/adri22/Desktop/AVA-Bot/app-web/node_modules/tsparticles-move-base/esm/Utils.js"],"sourcesContent":["import { clamp, getDistances, getRandom } from \"tsparticles-engine\";\nexport function applyDistance(particle) {\n    const initialPosition = particle.initialPosition, { dx, dy } = getDistances(initialPosition, particle.position), dxFixed = Math.abs(dx), dyFixed = Math.abs(dy), hDistance = particle.retina.maxDistance.horizontal, vDistance = particle.retina.maxDistance.vertical;\n    if (!hDistance && !vDistance) {\n        return;\n    }\n    if (((hDistance && dxFixed >= hDistance) || (vDistance && dyFixed >= vDistance)) && !particle.misplaced) {\n        particle.misplaced = (!!hDistance && dxFixed > hDistance) || (!!vDistance && dyFixed > vDistance);\n        if (hDistance) {\n            particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n        }\n        if (vDistance) {\n            particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n        }\n    }\n    else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n        particle.misplaced = false;\n    }\n    else if (particle.misplaced) {\n        const pos = particle.position, vel = particle.velocity;\n        if (hDistance && ((pos.x < initialPosition.x && vel.x < 0) || (pos.x > initialPosition.x && vel.x > 0))) {\n            vel.x *= -getRandom();\n        }\n        if (vDistance && ((pos.y < initialPosition.y && vel.y < 0) || (pos.y > initialPosition.y && vel.y > 0))) {\n            vel.y *= -getRandom();\n        }\n    }\n}\nexport function spin(particle, moveSpeed) {\n    const container = particle.container;\n    if (!particle.spin) {\n        return;\n    }\n    const updateFunc = {\n        x: particle.spin.direction === \"clockwise\" ? Math.cos : Math.sin,\n        y: particle.spin.direction === \"clockwise\" ? Math.sin : Math.cos,\n    };\n    particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\n    particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\n    particle.spin.radius += particle.spin.acceleration;\n    const maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height);\n    if (particle.spin.radius > maxCanvasSize / 2) {\n        particle.spin.radius = maxCanvasSize / 2;\n        particle.spin.acceleration *= -1;\n    }\n    else if (particle.spin.radius < 0) {\n        particle.spin.radius = 0;\n        particle.spin.acceleration *= -1;\n    }\n    particle.spin.angle += (moveSpeed / 100) * (1 - particle.spin.radius / maxCanvasSize);\n}\nexport function applyPath(particle, delta) {\n    var _a;\n    const particlesOptions = particle.options, pathOptions = particlesOptions.move.path, pathEnabled = pathOptions.enable;\n    if (!pathEnabled) {\n        return;\n    }\n    if (particle.lastPathTime <= particle.pathDelay) {\n        particle.lastPathTime += delta.value;\n        return;\n    }\n    const path = (_a = particle.pathGenerator) === null || _a === void 0 ? void 0 : _a.generate(particle);\n    if (path) {\n        particle.velocity.addTo(path);\n    }\n    if (pathOptions.clamp) {\n        particle.velocity.x = clamp(particle.velocity.x, -1, 1);\n        particle.velocity.y = clamp(particle.velocity.y, -1, 1);\n    }\n    particle.lastPathTime -= particle.pathDelay;\n}\nexport function getProximitySpeedFactor(particle) {\n    return particle.slow.inRange ? particle.slow.factor : 1;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}