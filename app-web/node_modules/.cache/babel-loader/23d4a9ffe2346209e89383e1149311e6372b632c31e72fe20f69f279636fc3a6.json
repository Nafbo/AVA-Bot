{"ast":null,"code":"import { Circle, ParticlesInteractorBase, getDistance, getLinkRandomColor } from \"tsparticles-engine\";\nimport { CircleWarp } from \"./CircleWarp\";\nimport { Links } from \"./Options/Classes/Links\";\nfunction getLinkDistance(pos1, pos2, optDistance, canvasSize, warp) {\n  let distance = getDistance(pos1, pos2);\n  if (!warp || distance <= optDistance) {\n    return distance;\n  }\n  const pos2NE = {\n    x: pos2.x - canvasSize.width,\n    y: pos2.y\n  };\n  distance = getDistance(pos1, pos2NE);\n  if (distance <= optDistance) {\n    return distance;\n  }\n  const pos2SE = {\n    x: pos2.x - canvasSize.width,\n    y: pos2.y - canvasSize.height\n  };\n  distance = getDistance(pos1, pos2SE);\n  if (distance <= optDistance) {\n    return distance;\n  }\n  const pos2SW = {\n    x: pos2.x,\n    y: pos2.y - canvasSize.height\n  };\n  distance = getDistance(pos1, pos2SW);\n  return distance;\n}\nexport class Linker extends ParticlesInteractorBase {\n  constructor(container) {\n    super(container);\n    this.linkContainer = container;\n  }\n  clear() {}\n  init() {\n    this.linkContainer.particles.linksColor = undefined;\n    this.linkContainer.particles.linksColors = new Map();\n  }\n  async interact(p1) {\n    var _a;\n    if (!p1.options.links) {\n      return;\n    }\n    p1.links = [];\n    const pos1 = p1.getPosition(),\n      container = this.container,\n      canvasSize = container.canvas.size;\n    if (pos1.x < 0 || pos1.y < 0 || pos1.x > canvasSize.width || pos1.y > canvasSize.height) {\n      return;\n    }\n    const linkOpt1 = p1.options.links,\n      optOpacity = linkOpt1.opacity,\n      optDistance = (_a = p1.retina.linksDistance) !== null && _a !== void 0 ? _a : 0,\n      warp = linkOpt1.warp,\n      range = warp ? new CircleWarp(pos1.x, pos1.y, optDistance, canvasSize) : new Circle(pos1.x, pos1.y, optDistance),\n      query = container.particles.quadTree.query(range);\n    for (const p2 of query) {\n      const linkOpt2 = p2.options.links;\n      if (p1 === p2 || !(linkOpt2 === null || linkOpt2 === void 0 ? void 0 : linkOpt2.enable) || linkOpt1.id !== linkOpt2.id || p2.spawning || p2.destroyed || !p2.links || p1.links.map(t => t.destination).indexOf(p2) !== -1 || p2.links.map(t => t.destination).indexOf(p1) !== -1) {\n        continue;\n      }\n      const pos2 = p2.getPosition();\n      if (pos2.x < 0 || pos2.y < 0 || pos2.x > canvasSize.width || pos2.y > canvasSize.height) {\n        continue;\n      }\n      const distance = getLinkDistance(pos1, pos2, optDistance, canvasSize, warp && linkOpt2.warp);\n      if (distance > optDistance) {\n        return;\n      }\n      const opacityLine = (1 - distance / optDistance) * optOpacity;\n      this.setColor(p1);\n      p1.links.push({\n        destination: p2,\n        opacity: opacityLine\n      });\n    }\n  }\n  isEnabled(particle) {\n    var _a;\n    return !!((_a = particle.options.links) === null || _a === void 0 ? void 0 : _a.enable);\n  }\n  loadParticlesOptions(options) {\n    var _a, _b;\n    if (!options.links) {\n      options.links = new Links();\n    }\n    for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      sources[_key - 1] = arguments[_key];\n    }\n    for (const source of sources) {\n      options.links.load((_b = (_a = source === null || source === void 0 ? void 0 : source.links) !== null && _a !== void 0 ? _a : source === null || source === void 0 ? void 0 : source.lineLinked) !== null && _b !== void 0 ? _b : source === null || source === void 0 ? void 0 : source.line_linked);\n    }\n  }\n  reset() {}\n  setColor(p1) {\n    if (!p1.options.links) {\n      return;\n    }\n    const container = this.linkContainer,\n      linksOptions = p1.options.links;\n    let linkColor = linksOptions.id === undefined ? container.particles.linksColor : container.particles.linksColors.get(linksOptions.id);\n    if (linkColor) {\n      return;\n    }\n    const optColor = linksOptions.color;\n    linkColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n    if (linksOptions.id === undefined) {\n      container.particles.linksColor = linkColor;\n    } else {\n      container.particles.linksColors.set(linksOptions.id, linkColor);\n    }\n  }\n}","map":{"version":3,"names":["Circle","ParticlesInteractorBase","getDistance","getLinkRandomColor","CircleWarp","Links","getLinkDistance","pos1","pos2","optDistance","canvasSize","warp","distance","pos2NE","x","width","y","pos2SE","height","pos2SW","Linker","constructor","container","linkContainer","clear","init","particles","linksColor","undefined","linksColors","Map","interact","p1","_a","options","links","getPosition","canvas","size","linkOpt1","optOpacity","opacity","retina","linksDistance","range","query","quadTree","p2","linkOpt2","enable","id","spawning","destroyed","map","t","destination","indexOf","opacityLine","setColor","push","isEnabled","particle","loadParticlesOptions","_b","_len","arguments","length","sources","Array","_key","source","load","lineLinked","line_linked","reset","linksOptions","linkColor","get","optColor","color","blink","consent","set"],"sources":["/Users/adri22/Desktop/AVA-Bot/app-web/node_modules/tsparticles-interaction-particles-links/esm/Linker.js"],"sourcesContent":["import { Circle, ParticlesInteractorBase, getDistance, getLinkRandomColor } from \"tsparticles-engine\";\nimport { CircleWarp } from \"./CircleWarp\";\nimport { Links } from \"./Options/Classes/Links\";\nfunction getLinkDistance(pos1, pos2, optDistance, canvasSize, warp) {\n    let distance = getDistance(pos1, pos2);\n    if (!warp || distance <= optDistance) {\n        return distance;\n    }\n    const pos2NE = {\n        x: pos2.x - canvasSize.width,\n        y: pos2.y,\n    };\n    distance = getDistance(pos1, pos2NE);\n    if (distance <= optDistance) {\n        return distance;\n    }\n    const pos2SE = {\n        x: pos2.x - canvasSize.width,\n        y: pos2.y - canvasSize.height,\n    };\n    distance = getDistance(pos1, pos2SE);\n    if (distance <= optDistance) {\n        return distance;\n    }\n    const pos2SW = {\n        x: pos2.x,\n        y: pos2.y - canvasSize.height,\n    };\n    distance = getDistance(pos1, pos2SW);\n    return distance;\n}\nexport class Linker extends ParticlesInteractorBase {\n    constructor(container) {\n        super(container);\n        this.linkContainer = container;\n    }\n    clear() {\n    }\n    init() {\n        this.linkContainer.particles.linksColor = undefined;\n        this.linkContainer.particles.linksColors = new Map();\n    }\n    async interact(p1) {\n        var _a;\n        if (!p1.options.links) {\n            return;\n        }\n        p1.links = [];\n        const pos1 = p1.getPosition(), container = this.container, canvasSize = container.canvas.size;\n        if (pos1.x < 0 || pos1.y < 0 || pos1.x > canvasSize.width || pos1.y > canvasSize.height) {\n            return;\n        }\n        const linkOpt1 = p1.options.links, optOpacity = linkOpt1.opacity, optDistance = (_a = p1.retina.linksDistance) !== null && _a !== void 0 ? _a : 0, warp = linkOpt1.warp, range = warp\n            ? new CircleWarp(pos1.x, pos1.y, optDistance, canvasSize)\n            : new Circle(pos1.x, pos1.y, optDistance), query = container.particles.quadTree.query(range);\n        for (const p2 of query) {\n            const linkOpt2 = p2.options.links;\n            if (p1 === p2 ||\n                !(linkOpt2 === null || linkOpt2 === void 0 ? void 0 : linkOpt2.enable) ||\n                linkOpt1.id !== linkOpt2.id ||\n                p2.spawning ||\n                p2.destroyed ||\n                !p2.links ||\n                p1.links.map((t) => t.destination).indexOf(p2) !== -1 ||\n                p2.links.map((t) => t.destination).indexOf(p1) !== -1) {\n                continue;\n            }\n            const pos2 = p2.getPosition();\n            if (pos2.x < 0 || pos2.y < 0 || pos2.x > canvasSize.width || pos2.y > canvasSize.height) {\n                continue;\n            }\n            const distance = getLinkDistance(pos1, pos2, optDistance, canvasSize, warp && linkOpt2.warp);\n            if (distance > optDistance) {\n                return;\n            }\n            const opacityLine = (1 - distance / optDistance) * optOpacity;\n            this.setColor(p1);\n            p1.links.push({\n                destination: p2,\n                opacity: opacityLine,\n            });\n        }\n    }\n    isEnabled(particle) {\n        var _a;\n        return !!((_a = particle.options.links) === null || _a === void 0 ? void 0 : _a.enable);\n    }\n    loadParticlesOptions(options, ...sources) {\n        var _a, _b;\n        if (!options.links) {\n            options.links = new Links();\n        }\n        for (const source of sources) {\n            options.links.load((_b = (_a = source === null || source === void 0 ? void 0 : source.links) !== null && _a !== void 0 ? _a : source === null || source === void 0 ? void 0 : source.lineLinked) !== null && _b !== void 0 ? _b : source === null || source === void 0 ? void 0 : source.line_linked);\n        }\n    }\n    reset() {\n    }\n    setColor(p1) {\n        if (!p1.options.links) {\n            return;\n        }\n        const container = this.linkContainer, linksOptions = p1.options.links;\n        let linkColor = linksOptions.id === undefined\n            ? container.particles.linksColor\n            : container.particles.linksColors.get(linksOptions.id);\n        if (linkColor) {\n            return;\n        }\n        const optColor = linksOptions.color;\n        linkColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n        if (linksOptions.id === undefined) {\n            container.particles.linksColor = linkColor;\n        }\n        else {\n            container.particles.linksColors.set(linksOptions.id, linkColor);\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}