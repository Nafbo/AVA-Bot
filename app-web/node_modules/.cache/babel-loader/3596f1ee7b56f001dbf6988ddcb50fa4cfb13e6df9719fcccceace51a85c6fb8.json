{"ast":null,"code":"import { InteractionManager } from \"./Utils/InteractionManager\";\nimport { Particle } from \"./Particle\";\nimport { Point } from \"./Utils/Point\";\nimport { QuadTree } from \"./Utils/QuadTree\";\nimport { Rectangle } from \"./Utils/Rectangle\";\nimport { calcPositionFromSize } from \"../Utils/NumberUtils\";\nexport class Particles {\n  constructor(engine, container) {\n    this.container = container;\n    this._engine = engine;\n    this.nextId = 0;\n    this.array = [];\n    this.zArray = [];\n    this.pool = [];\n    this.limit = 0;\n    this.needsSort = false;\n    this.lastZIndex = 0;\n    this.interactionManager = new InteractionManager(this._engine, container);\n    const canvasSize = this.container.canvas.size;\n    this.quadTree = new QuadTree(new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n    this.movers = this._engine.plugins.getMovers(container, true);\n    this.updaters = this._engine.plugins.getUpdaters(container, true);\n  }\n  get count() {\n    return this.array.length;\n  }\n  addManualParticles() {\n    const container = this.container,\n      options = container.actualOptions;\n    for (const particle of options.manualParticles) {\n      this.addParticle(calcPositionFromSize({\n        size: container.canvas.size,\n        position: particle.position\n      }), particle.options);\n    }\n  }\n  addParticle(position, overrideOptions, group, initializer) {\n    const container = this.container,\n      options = container.actualOptions,\n      limit = options.particles.number.limit;\n    if (limit > 0) {\n      const countToRemove = this.count + 1 - limit;\n      if (countToRemove > 0) {\n        this.removeQuantity(countToRemove);\n      }\n    }\n    return this._pushParticle(position, overrideOptions, group, initializer);\n  }\n  clear() {\n    this.array = [];\n    this.zArray = [];\n  }\n  destroy() {\n    this.array = [];\n    this.zArray = [];\n    this.movers = [];\n    this.updaters = [];\n  }\n  async draw(delta) {\n    const container = this.container,\n      canvasSize = this.container.canvas.size;\n    this.quadTree = new QuadTree(new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n    container.canvas.clear();\n    await this.update(delta);\n    if (this.needsSort) {\n      this.zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n      this.lastZIndex = this.zArray[this.zArray.length - 1].position.z;\n      this.needsSort = false;\n    }\n    for (const [, plugin] of container.plugins) {\n      container.canvas.drawPlugin(plugin, delta);\n    }\n    for (const p of this.zArray) {\n      p.draw(delta);\n    }\n  }\n  handleClickMode(mode) {\n    this.interactionManager.handleClickMode(mode);\n  }\n  init() {\n    var _a;\n    const container = this.container,\n      options = container.actualOptions;\n    this.lastZIndex = 0;\n    this.needsSort = false;\n    let handled = false;\n    this.updaters = this._engine.plugins.getUpdaters(container, true);\n    this.interactionManager.init();\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particlesInitialization !== undefined) {\n        handled = plugin.particlesInitialization();\n      }\n      if (handled) {\n        break;\n      }\n    }\n    this.interactionManager.init();\n    for (const [, pathGenerator] of container.pathGenerators) {\n      pathGenerator.init(container);\n    }\n    this.addManualParticles();\n    if (!handled) {\n      for (const group in options.particles.groups) {\n        const groupOptions = options.particles.groups[group];\n        for (let i = this.count, j = 0; j < ((_a = groupOptions.number) === null || _a === void 0 ? void 0 : _a.value) && i < options.particles.number.value; i++, j++) {\n          this.addParticle(undefined, groupOptions, group);\n        }\n      }\n      for (let i = this.count; i < options.particles.number.value; i++) {\n        this.addParticle();\n      }\n    }\n  }\n  push(nb, mouse, overrideOptions, group) {\n    this.pushing = true;\n    for (let i = 0; i < nb; i++) {\n      this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions, group);\n    }\n    this.pushing = false;\n  }\n  async redraw() {\n    this.clear();\n    this.init();\n    await this.draw({\n      value: 0,\n      factor: 0\n    });\n  }\n  remove(particle, group, override) {\n    this.removeAt(this.array.indexOf(particle), undefined, group, override);\n  }\n  removeAt(index) {\n    let quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let group = arguments.length > 2 ? arguments[2] : undefined;\n    let override = arguments.length > 3 ? arguments[3] : undefined;\n    if (index < 0 || index > this.count) {\n      return;\n    }\n    let deleted = 0;\n    for (let i = index; deleted < quantity && i < this.count; i++) {\n      const particle = this.array[i];\n      if (!particle || particle.group !== group) {\n        continue;\n      }\n      particle.destroy(override);\n      this.array.splice(i--, 1);\n      const zIdx = this.zArray.indexOf(particle);\n      this.zArray.splice(zIdx, 1);\n      this.pool.push(particle);\n      deleted++;\n      this._engine.dispatchEvent(\"particleRemoved\", {\n        container: this.container,\n        data: {\n          particle\n        }\n      });\n    }\n  }\n  removeQuantity(quantity, group) {\n    this.removeAt(0, quantity, group);\n  }\n  setDensity() {\n    const options = this.container.actualOptions;\n    for (const group in options.particles.groups) {\n      this._applyDensity(options.particles.groups[group], 0, group);\n    }\n    this._applyDensity(options.particles, options.manualParticles.length);\n  }\n  async update(delta) {\n    var _a, _b;\n    const container = this.container,\n      particlesToDelete = [];\n    for (const [, pathGenerator] of container.pathGenerators) {\n      pathGenerator.update();\n    }\n    for (const [, plugin] of container.plugins) {\n      (_a = plugin.update) === null || _a === void 0 ? void 0 : _a.call(plugin, delta);\n    }\n    for (const particle of this.array) {\n      const resizeFactor = container.canvas.resizeFactor;\n      if (resizeFactor && !particle.ignoresResizeRatio) {\n        particle.position.x *= resizeFactor.width;\n        particle.position.y *= resizeFactor.height;\n        particle.initialPosition.x *= resizeFactor.width;\n        particle.initialPosition.y *= resizeFactor.height;\n      }\n      particle.ignoresResizeRatio = false;\n      await this.interactionManager.reset(particle);\n      for (const [, plugin] of this.container.plugins) {\n        if (particle.destroyed) {\n          break;\n        }\n        (_b = plugin.particleUpdate) === null || _b === void 0 ? void 0 : _b.call(plugin, particle, delta);\n      }\n      for (const mover of this.movers) {\n        if (mover.isEnabled(particle)) {\n          mover.move(particle, delta);\n        }\n      }\n      if (particle.destroyed) {\n        particlesToDelete.push(particle);\n        continue;\n      }\n      this.quadTree.insert(new Point(particle.getPosition(), particle));\n    }\n    for (const particle of particlesToDelete) {\n      this.remove(particle);\n    }\n    await this.interactionManager.externalInteract(delta);\n    for (const particle of this.array) {\n      for (const updater of this.updaters) {\n        updater.update(particle, delta);\n      }\n      if (!particle.destroyed && !particle.spawning) {\n        await this.interactionManager.particlesInteract(particle, delta);\n      }\n    }\n    delete container.canvas.resizeFactor;\n  }\n  _applyDensity(options, manualCount, group) {\n    var _a;\n    if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n      return;\n    }\n    const numberOptions = options.number,\n      densityFactor = this._initDensityFactor(numberOptions.density),\n      optParticlesNumber = numberOptions.value,\n      optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber,\n      particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount,\n      particlesCount = Math.min(this.count, this.array.filter(t => t.group === group).length);\n    this.limit = numberOptions.limit * densityFactor;\n    if (particlesCount < particlesNumber) {\n      this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n    } else if (particlesCount > particlesNumber) {\n      this.removeQuantity(particlesCount - particlesNumber, group);\n    }\n  }\n  _initDensityFactor(densityOptions) {\n    const container = this.container;\n    if (!container.canvas.element || !densityOptions.enable) {\n      return 1;\n    }\n    const canvas = container.canvas.element,\n      pxRatio = container.retina.pixelRatio;\n    return canvas.width * canvas.height / (densityOptions.factor * pxRatio ** 2 * densityOptions.area);\n  }\n  _pushParticle(position, overrideOptions, group, initializer) {\n    try {\n      let particle = this.pool.pop();\n      if (particle) {\n        particle.init(this.nextId, position, overrideOptions, group);\n      } else {\n        particle = new Particle(this._engine, this.nextId, this.container, position, overrideOptions, group);\n      }\n      let canAdd = true;\n      if (initializer) {\n        canAdd = initializer(particle);\n      }\n      if (!canAdd) {\n        return;\n      }\n      this.array.push(particle);\n      this.zArray.push(particle);\n      this.nextId++;\n      this._engine.dispatchEvent(\"particleAdded\", {\n        container: this.container,\n        data: {\n          particle\n        }\n      });\n      return particle;\n    } catch (e) {\n      console.warn(`error adding particle: ${e}`);\n      return;\n    }\n  }\n}","map":{"version":3,"names":["InteractionManager","Particle","Point","QuadTree","Rectangle","calcPositionFromSize","Particles","constructor","engine","container","_engine","nextId","array","zArray","pool","limit","needsSort","lastZIndex","interactionManager","canvasSize","canvas","size","quadTree","width","height","movers","plugins","getMovers","updaters","getUpdaters","count","length","addManualParticles","options","actualOptions","particle","manualParticles","addParticle","position","overrideOptions","group","initializer","particles","number","countToRemove","removeQuantity","_pushParticle","clear","destroy","draw","delta","update","sort","a","b","z","id","plugin","drawPlugin","p","handleClickMode","mode","init","_a","handled","particlesInitialization","undefined","pathGenerator","pathGenerators","groups","groupOptions","i","j","value","push","nb","mouse","pushing","redraw","factor","remove","override","removeAt","indexOf","index","quantity","arguments","deleted","splice","zIdx","dispatchEvent","data","setDensity","_applyDensity","_b","particlesToDelete","call","resizeFactor","ignoresResizeRatio","x","y","initialPosition","reset","destroyed","particleUpdate","mover","isEnabled","move","insert","getPosition","externalInteract","updater","spawning","particlesInteract","manualCount","density","enable","numberOptions","densityFactor","_initDensityFactor","optParticlesNumber","optParticlesLimit","particlesNumber","Math","min","particlesCount","filter","t","abs","densityOptions","element","pxRatio","retina","pixelRatio","area","pop","canAdd","e","console","warn"],"sources":["/Users/adri22/Desktop/AVA-Bot/app-web/node_modules/tsparticles-engine/esm/Core/Particles.js"],"sourcesContent":["import { InteractionManager } from \"./Utils/InteractionManager\";\nimport { Particle } from \"./Particle\";\nimport { Point } from \"./Utils/Point\";\nimport { QuadTree } from \"./Utils/QuadTree\";\nimport { Rectangle } from \"./Utils/Rectangle\";\nimport { calcPositionFromSize } from \"../Utils/NumberUtils\";\nexport class Particles {\n    constructor(engine, container) {\n        this.container = container;\n        this._engine = engine;\n        this.nextId = 0;\n        this.array = [];\n        this.zArray = [];\n        this.pool = [];\n        this.limit = 0;\n        this.needsSort = false;\n        this.lastZIndex = 0;\n        this.interactionManager = new InteractionManager(this._engine, container);\n        const canvasSize = this.container.canvas.size;\n        this.quadTree = new QuadTree(new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2), 4);\n        this.movers = this._engine.plugins.getMovers(container, true);\n        this.updaters = this._engine.plugins.getUpdaters(container, true);\n    }\n    get count() {\n        return this.array.length;\n    }\n    addManualParticles() {\n        const container = this.container, options = container.actualOptions;\n        for (const particle of options.manualParticles) {\n            this.addParticle(calcPositionFromSize({\n                size: container.canvas.size,\n                position: particle.position,\n            }), particle.options);\n        }\n    }\n    addParticle(position, overrideOptions, group, initializer) {\n        const container = this.container, options = container.actualOptions, limit = options.particles.number.limit;\n        if (limit > 0) {\n            const countToRemove = this.count + 1 - limit;\n            if (countToRemove > 0) {\n                this.removeQuantity(countToRemove);\n            }\n        }\n        return this._pushParticle(position, overrideOptions, group, initializer);\n    }\n    clear() {\n        this.array = [];\n        this.zArray = [];\n    }\n    destroy() {\n        this.array = [];\n        this.zArray = [];\n        this.movers = [];\n        this.updaters = [];\n    }\n    async draw(delta) {\n        const container = this.container, canvasSize = this.container.canvas.size;\n        this.quadTree = new QuadTree(new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2), 4);\n        container.canvas.clear();\n        await this.update(delta);\n        if (this.needsSort) {\n            this.zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n            this.lastZIndex = this.zArray[this.zArray.length - 1].position.z;\n            this.needsSort = false;\n        }\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawPlugin(plugin, delta);\n        }\n        for (const p of this.zArray) {\n            p.draw(delta);\n        }\n    }\n    handleClickMode(mode) {\n        this.interactionManager.handleClickMode(mode);\n    }\n    init() {\n        var _a;\n        const container = this.container, options = container.actualOptions;\n        this.lastZIndex = 0;\n        this.needsSort = false;\n        let handled = false;\n        this.updaters = this._engine.plugins.getUpdaters(container, true);\n        this.interactionManager.init();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particlesInitialization !== undefined) {\n                handled = plugin.particlesInitialization();\n            }\n            if (handled) {\n                break;\n            }\n        }\n        this.interactionManager.init();\n        for (const [, pathGenerator] of container.pathGenerators) {\n            pathGenerator.init(container);\n        }\n        this.addManualParticles();\n        if (!handled) {\n            for (const group in options.particles.groups) {\n                const groupOptions = options.particles.groups[group];\n                for (let i = this.count, j = 0; j < ((_a = groupOptions.number) === null || _a === void 0 ? void 0 : _a.value) && i < options.particles.number.value; i++, j++) {\n                    this.addParticle(undefined, groupOptions, group);\n                }\n            }\n            for (let i = this.count; i < options.particles.number.value; i++) {\n                this.addParticle();\n            }\n        }\n    }\n    push(nb, mouse, overrideOptions, group) {\n        this.pushing = true;\n        for (let i = 0; i < nb; i++) {\n            this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions, group);\n        }\n        this.pushing = false;\n    }\n    async redraw() {\n        this.clear();\n        this.init();\n        await this.draw({ value: 0, factor: 0 });\n    }\n    remove(particle, group, override) {\n        this.removeAt(this.array.indexOf(particle), undefined, group, override);\n    }\n    removeAt(index, quantity = 1, group, override) {\n        if (index < 0 || index > this.count) {\n            return;\n        }\n        let deleted = 0;\n        for (let i = index; deleted < quantity && i < this.count; i++) {\n            const particle = this.array[i];\n            if (!particle || particle.group !== group) {\n                continue;\n            }\n            particle.destroy(override);\n            this.array.splice(i--, 1);\n            const zIdx = this.zArray.indexOf(particle);\n            this.zArray.splice(zIdx, 1);\n            this.pool.push(particle);\n            deleted++;\n            this._engine.dispatchEvent(\"particleRemoved\", {\n                container: this.container,\n                data: {\n                    particle,\n                },\n            });\n        }\n    }\n    removeQuantity(quantity, group) {\n        this.removeAt(0, quantity, group);\n    }\n    setDensity() {\n        const options = this.container.actualOptions;\n        for (const group in options.particles.groups) {\n            this._applyDensity(options.particles.groups[group], 0, group);\n        }\n        this._applyDensity(options.particles, options.manualParticles.length);\n    }\n    async update(delta) {\n        var _a, _b;\n        const container = this.container, particlesToDelete = [];\n        for (const [, pathGenerator] of container.pathGenerators) {\n            pathGenerator.update();\n        }\n        for (const [, plugin] of container.plugins) {\n            (_a = plugin.update) === null || _a === void 0 ? void 0 : _a.call(plugin, delta);\n        }\n        for (const particle of this.array) {\n            const resizeFactor = container.canvas.resizeFactor;\n            if (resizeFactor && !particle.ignoresResizeRatio) {\n                particle.position.x *= resizeFactor.width;\n                particle.position.y *= resizeFactor.height;\n                particle.initialPosition.x *= resizeFactor.width;\n                particle.initialPosition.y *= resizeFactor.height;\n            }\n            particle.ignoresResizeRatio = false;\n            await this.interactionManager.reset(particle);\n            for (const [, plugin] of this.container.plugins) {\n                if (particle.destroyed) {\n                    break;\n                }\n                (_b = plugin.particleUpdate) === null || _b === void 0 ? void 0 : _b.call(plugin, particle, delta);\n            }\n            for (const mover of this.movers) {\n                if (mover.isEnabled(particle)) {\n                    mover.move(particle, delta);\n                }\n            }\n            if (particle.destroyed) {\n                particlesToDelete.push(particle);\n                continue;\n            }\n            this.quadTree.insert(new Point(particle.getPosition(), particle));\n        }\n        for (const particle of particlesToDelete) {\n            this.remove(particle);\n        }\n        await this.interactionManager.externalInteract(delta);\n        for (const particle of this.array) {\n            for (const updater of this.updaters) {\n                updater.update(particle, delta);\n            }\n            if (!particle.destroyed && !particle.spawning) {\n                await this.interactionManager.particlesInteract(particle, delta);\n            }\n        }\n        delete container.canvas.resizeFactor;\n    }\n    _applyDensity(options, manualCount, group) {\n        var _a;\n        if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n            return;\n        }\n        const numberOptions = options.number, densityFactor = this._initDensityFactor(numberOptions.density), optParticlesNumber = numberOptions.value, optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber, particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount, particlesCount = Math.min(this.count, this.array.filter((t) => t.group === group).length);\n        this.limit = numberOptions.limit * densityFactor;\n        if (particlesCount < particlesNumber) {\n            this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n        }\n        else if (particlesCount > particlesNumber) {\n            this.removeQuantity(particlesCount - particlesNumber, group);\n        }\n    }\n    _initDensityFactor(densityOptions) {\n        const container = this.container;\n        if (!container.canvas.element || !densityOptions.enable) {\n            return 1;\n        }\n        const canvas = container.canvas.element, pxRatio = container.retina.pixelRatio;\n        return (canvas.width * canvas.height) / (densityOptions.factor * pxRatio ** 2 * densityOptions.area);\n    }\n    _pushParticle(position, overrideOptions, group, initializer) {\n        try {\n            let particle = this.pool.pop();\n            if (particle) {\n                particle.init(this.nextId, position, overrideOptions, group);\n            }\n            else {\n                particle = new Particle(this._engine, this.nextId, this.container, position, overrideOptions, group);\n            }\n            let canAdd = true;\n            if (initializer) {\n                canAdd = initializer(particle);\n            }\n            if (!canAdd) {\n                return;\n            }\n            this.array.push(particle);\n            this.zArray.push(particle);\n            this.nextId++;\n            this._engine.dispatchEvent(\"particleAdded\", {\n                container: this.container,\n                data: {\n                    particle,\n                },\n            });\n            return particle;\n        }\n        catch (e) {\n            console.warn(`error adding particle: ${e}`);\n            return;\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}