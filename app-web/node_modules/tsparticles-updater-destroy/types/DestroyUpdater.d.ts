import type { Container, Engine, IBounds, IParticleUpdater, IParticlesOptions, Particle, ParticlesOptions, RecursivePartial } from "tsparticles-engine";
import { Destroy } from "./Options/Classes/Destroy";
import type { IDestroy } from "./Options/Interfaces/IDestroy";
type IDestroyParticlesOptions = IParticlesOptions & {
    destroy?: IDestroy;
};
type DestroyParticlesOptions = ParticlesOptions & {
    destroy?: Destroy;
};
type DestroyParticle = Particle & {
    destroyBounds?: Partial<IBounds>;
    options: DestroyParticlesOptions;
    splitCount?: number;
};
export declare class DestroyUpdater implements IParticleUpdater {
    private readonly engine;
    private readonly container;
    constructor(engine: Engine, container: Container);
    init(particle: DestroyParticle): void;
    isEnabled(particle: Particle): boolean;
    loadOptions(options: DestroyParticlesOptions, ...sources: (RecursivePartial<IDestroyParticlesOptions> | undefined)[]): void;
    particleDestroyed(particle: DestroyParticle, override?: boolean): void;
    update(particle: DestroyParticle): void;
    private addSplitParticle;
    private split;
}
export {};
