{"ast":null,"code":"import { clear, drawParticle, drawParticlePlugin, drawPlugin, paintBase, paintImage } from \"../Utils/CanvasUtils\";\nimport { deepExtend, isSsr } from \"../Utils/Utils\";\nimport { getStyleFromHsl, getStyleFromRgb, rangeColorToHsl, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { generatedAttribute } from \"./Utils/Constants\";\nfunction setTransformValue(factor, newFactor, key) {\n  var _a;\n  const newValue = newFactor[key];\n  if (newValue !== undefined) {\n    factor[key] = ((_a = factor[key]) !== null && _a !== void 0 ? _a : 1) * newValue;\n  }\n}\nexport class Canvas {\n  constructor(container) {\n    this.container = container;\n    this.size = {\n      height: 0,\n      width: 0\n    };\n    this._context = null;\n    this._generated = false;\n    this._preDrawUpdaters = [];\n    this._postDrawUpdaters = [];\n    this._resizePlugins = [];\n    this._colorPlugins = [];\n    this._mutationObserver = !isSsr() && typeof MutationObserver !== \"undefined\" ? new MutationObserver(records => {\n      for (const record of records) {\n        if (record.type === \"attributes\" && record.attributeName === \"style\") {\n          this._repairStyle();\n        }\n      }\n    }) : undefined;\n  }\n  get _fullScreen() {\n    return this.container.actualOptions.fullScreen.enable;\n  }\n  clear() {\n    const options = this.container.actualOptions,\n      trail = options.particles.move.trail,\n      trailFill = this._trailFill;\n    if (options.backgroundMask.enable) {\n      this.paint();\n    } else if (trail.enable && trail.length > 0 && trailFill) {\n      if (trailFill.color) {\n        this._paintBase(getStyleFromRgb(trailFill.color, trailFill.opacity));\n      } else if (trailFill.image) {\n        this._paintImage(trailFill.image, trailFill.opacity);\n      }\n    } else {\n      this.draw(ctx => {\n        clear(ctx, this.size);\n      });\n    }\n  }\n  destroy() {\n    var _a, _b;\n    (_a = this._mutationObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\n    if (this._generated) {\n      (_b = this.element) === null || _b === void 0 ? void 0 : _b.remove();\n    } else {\n      this._resetOriginalStyle();\n    }\n    this.stop();\n    this._preDrawUpdaters = [];\n    this._postDrawUpdaters = [];\n    this._resizePlugins = [];\n    this._colorPlugins = [];\n  }\n  draw(cb) {\n    if (!this._context) {\n      return;\n    }\n    return cb(this._context);\n  }\n  drawParticle(particle, delta) {\n    var _a;\n    if (particle.spawning || particle.destroyed) {\n      return;\n    }\n    const radius = particle.getRadius();\n    if (radius <= 0) {\n      return;\n    }\n    const pfColor = particle.getFillColor(),\n      psColor = (_a = particle.getStrokeColor()) !== null && _a !== void 0 ? _a : pfColor;\n    let [fColor, sColor] = this._getPluginParticleColors(particle);\n    if (!fColor) {\n      fColor = pfColor;\n    }\n    if (!sColor) {\n      sColor = psColor;\n    }\n    if (!fColor && !sColor) {\n      return;\n    }\n    this.draw(ctx => {\n      var _a, _b, _c, _d;\n      const options = this.container.actualOptions,\n        zIndexOptions = particle.options.zIndex,\n        zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate,\n        opacity = (_c = (_a = particle.bubble.opacity) !== null && _a !== void 0 ? _a : (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1,\n        strokeOpacity = (_d = particle.strokeOpacity) !== null && _d !== void 0 ? _d : opacity,\n        zOpacity = opacity * zOpacityFactor,\n        zStrokeOpacity = strokeOpacity * zOpacityFactor,\n        transform = {},\n        colorStyles = {\n          fill: fColor ? getStyleFromHsl(fColor, zOpacity) : undefined\n        };\n      colorStyles.stroke = sColor ? getStyleFromHsl(sColor, zStrokeOpacity) : colorStyles.fill;\n      this._applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform);\n      drawParticle({\n        container: this.container,\n        context: ctx,\n        particle,\n        delta,\n        colorStyles,\n        backgroundMask: options.backgroundMask.enable,\n        composite: options.backgroundMask.composite,\n        radius: radius * (1 - particle.zIndexFactor) ** zIndexOptions.sizeRate,\n        opacity: zOpacity,\n        shadow: particle.options.shadow,\n        transform\n      });\n      this._applyPostDrawUpdaters(particle);\n    });\n  }\n  drawParticlePlugin(plugin, particle, delta) {\n    this.draw(ctx => {\n      drawParticlePlugin(ctx, plugin, particle, delta);\n    });\n  }\n  drawPlugin(plugin, delta) {\n    this.draw(ctx => {\n      drawPlugin(ctx, plugin, delta);\n    });\n  }\n  async init() {\n    var _a;\n    this.resize();\n    this._initStyle();\n    this._initCover();\n    try {\n      await this._initTrail();\n    } catch (e) {\n      console.error(e);\n    }\n    this.initBackground();\n    if (this.element) {\n      (_a = this._mutationObserver) === null || _a === void 0 ? void 0 : _a.observe(this.element, {\n        attributes: true\n      });\n    }\n    this.initUpdaters();\n    this.initPlugins();\n    this.paint();\n  }\n  initBackground() {\n    const options = this.container.actualOptions,\n      background = options.background,\n      element = this.element,\n      elementStyle = element === null || element === void 0 ? void 0 : element.style;\n    if (!elementStyle) {\n      return;\n    }\n    if (background.color) {\n      const color = rangeColorToRgb(background.color);\n      elementStyle.backgroundColor = color ? getStyleFromRgb(color, background.opacity) : \"\";\n    } else {\n      elementStyle.backgroundColor = \"\";\n    }\n    elementStyle.backgroundImage = background.image || \"\";\n    elementStyle.backgroundPosition = background.position || \"\";\n    elementStyle.backgroundRepeat = background.repeat || \"\";\n    elementStyle.backgroundSize = background.size || \"\";\n  }\n  initPlugins() {\n    this._resizePlugins = [];\n    for (const [, plugin] of this.container.plugins) {\n      if (plugin.resize) {\n        this._resizePlugins.push(plugin);\n      }\n      if (plugin.particleFillColor || plugin.particleStrokeColor) {\n        this._colorPlugins.push(plugin);\n      }\n    }\n  }\n  initUpdaters() {\n    this._preDrawUpdaters = [];\n    this._postDrawUpdaters = [];\n    for (const updater of this.container.particles.updaters) {\n      if (updater.afterDraw) {\n        this._postDrawUpdaters.push(updater);\n      }\n      if (updater.getColorStyles || updater.getTransformValues || updater.beforeDraw) {\n        this._preDrawUpdaters.push(updater);\n      }\n    }\n  }\n  loadCanvas(canvas) {\n    var _a, _b;\n    if (this._generated) {\n      (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n    this._generated = canvas.dataset && generatedAttribute in canvas.dataset ? canvas.dataset[generatedAttribute] === \"true\" : this._generated;\n    this.element = canvas;\n    this.element.ariaHidden = \"true\";\n    this._originalStyle = deepExtend({}, this.element.style);\n    this.size.height = canvas.offsetHeight;\n    this.size.width = canvas.offsetWidth;\n    this._context = this.element.getContext(\"2d\");\n    (_b = this._mutationObserver) === null || _b === void 0 ? void 0 : _b.observe(this.element, {\n      attributes: true\n    });\n    this.container.retina.init();\n    this.initBackground();\n  }\n  paint() {\n    const options = this.container.actualOptions;\n    this.draw(ctx => {\n      if (options.backgroundMask.enable && options.backgroundMask.cover) {\n        clear(ctx, this.size);\n        this._paintBase(this._coverColorStyle);\n      } else {\n        this._paintBase();\n      }\n    });\n  }\n  resize() {\n    if (!this.element) {\n      return;\n    }\n    const container = this.container,\n      pxRatio = container.retina.pixelRatio,\n      size = container.canvas.size,\n      newSize = {\n        width: this.element.offsetWidth * pxRatio,\n        height: this.element.offsetHeight * pxRatio\n      };\n    if (newSize.height === size.height && newSize.width === size.width && newSize.height === this.element.height && newSize.width === this.element.width) {\n      return;\n    }\n    const oldSize = Object.assign({}, size);\n    this.element.width = size.width = this.element.offsetWidth * pxRatio;\n    this.element.height = size.height = this.element.offsetHeight * pxRatio;\n    if (this.container.started) {\n      this.resizeFactor = {\n        width: size.width / oldSize.width,\n        height: size.height / oldSize.height\n      };\n    }\n  }\n  stop() {\n    this.draw(ctx => {\n      clear(ctx, this.size);\n    });\n  }\n  async windowResize() {\n    if (!this.element) {\n      return;\n    }\n    this.resize();\n    const container = this.container,\n      needsRefresh = container.updateActualOptions();\n    container.particles.setDensity();\n    this._applyResizePlugins();\n    if (needsRefresh) {\n      await container.refresh();\n    }\n  }\n  _applyPostDrawUpdaters(particle) {\n    var _a;\n    for (const updater of this._postDrawUpdaters) {\n      (_a = updater.afterDraw) === null || _a === void 0 ? void 0 : _a.call(updater, particle);\n    }\n  }\n  _applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform) {\n    var _a;\n    for (const updater of this._preDrawUpdaters) {\n      if (updater.getColorStyles) {\n        const {\n          fill,\n          stroke\n        } = updater.getColorStyles(particle, ctx, radius, zOpacity);\n        if (fill) {\n          colorStyles.fill = fill;\n        }\n        if (stroke) {\n          colorStyles.stroke = stroke;\n        }\n      }\n      if (updater.getTransformValues) {\n        const updaterTransform = updater.getTransformValues(particle);\n        for (const key in updaterTransform) {\n          setTransformValue(transform, updaterTransform, key);\n        }\n      }\n      (_a = updater.beforeDraw) === null || _a === void 0 ? void 0 : _a.call(updater, particle);\n    }\n  }\n  _applyResizePlugins() {\n    for (const plugin of this._resizePlugins) {\n      if (plugin.resize) {\n        plugin.resize();\n      }\n    }\n  }\n  _getPluginParticleColors(particle) {\n    let fColor, sColor;\n    for (const plugin of this._colorPlugins) {\n      if (!fColor && plugin.particleFillColor) {\n        fColor = rangeColorToHsl(plugin.particleFillColor(particle));\n      }\n      if (!sColor && plugin.particleStrokeColor) {\n        sColor = rangeColorToHsl(plugin.particleStrokeColor(particle));\n      }\n      if (fColor && sColor) {\n        break;\n      }\n    }\n    return [fColor, sColor];\n  }\n  _initCover() {\n    const options = this.container.actualOptions,\n      cover = options.backgroundMask.cover,\n      color = cover.color,\n      coverRgb = rangeColorToRgb(color);\n    if (coverRgb) {\n      const coverColor = {\n        r: coverRgb.r,\n        g: coverRgb.g,\n        b: coverRgb.b,\n        a: cover.opacity\n      };\n      this._coverColorStyle = getStyleFromRgb(coverColor, coverColor.a);\n    }\n  }\n  _initStyle() {\n    const element = this.element,\n      options = this.container.actualOptions;\n    if (!element) {\n      return;\n    }\n    if (this._fullScreen) {\n      this._originalStyle = deepExtend({}, element.style);\n      this._setFullScreenStyle();\n    } else {\n      this._resetOriginalStyle();\n    }\n    for (const key in options.style) {\n      if (!key || !options.style) {\n        continue;\n      }\n      const value = options.style[key];\n      if (!value) {\n        continue;\n      }\n      element.style.setProperty(key, value, \"important\");\n    }\n  }\n  async _initTrail() {\n    const options = this.container.actualOptions,\n      trail = options.particles.move.trail,\n      trailFill = trail.fill;\n    if (!trail.enable) {\n      return;\n    }\n    if (trailFill.color) {\n      const fillColor = rangeColorToRgb(trailFill.color);\n      if (!fillColor) {\n        return;\n      }\n      const trail = options.particles.move.trail;\n      this._trailFill = {\n        color: Object.assign({}, fillColor),\n        opacity: 1 / trail.length\n      };\n    } else {\n      await new Promise((resolve, reject) => {\n        if (!trailFill.image) {\n          return;\n        }\n        const img = document.createElement(\"img\");\n        img.addEventListener(\"load\", () => {\n          this._trailFill = {\n            image: img,\n            opacity: 1 / trail.length\n          };\n          resolve();\n        });\n        img.addEventListener(\"error\", evt => {\n          reject(evt.error);\n        });\n        img.src = trailFill.image;\n      });\n    }\n  }\n  _paintBase(baseColor) {\n    this.draw(ctx => {\n      paintBase(ctx, this.size, baseColor);\n    });\n  }\n  _paintImage(image, opacity) {\n    this.draw(ctx => {\n      paintImage(ctx, this.size, image, opacity);\n    });\n  }\n  _repairStyle() {\n    var _a, _b;\n    const element = this.element;\n    if (!element) {\n      return;\n    }\n    (_a = this._mutationObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\n    this._initStyle();\n    this.initBackground();\n    (_b = this._mutationObserver) === null || _b === void 0 ? void 0 : _b.observe(element, {\n      attributes: true\n    });\n  }\n  _resetOriginalStyle() {\n    const element = this.element,\n      originalStyle = this._originalStyle;\n    if (!(element && originalStyle)) {\n      return;\n    }\n    element.style.position = originalStyle.position;\n    element.style.zIndex = originalStyle.zIndex;\n    element.style.top = originalStyle.top;\n    element.style.left = originalStyle.left;\n    element.style.width = originalStyle.width;\n    element.style.height = originalStyle.height;\n  }\n  _setFullScreenStyle() {\n    const element = this.element;\n    if (!element) {\n      return;\n    }\n    const priority = \"important\";\n    element.style.setProperty(\"position\", \"fixed\", priority);\n    element.style.setProperty(\"z-index\", this.container.actualOptions.fullScreen.zIndex.toString(10), priority);\n    element.style.setProperty(\"top\", \"0\", priority);\n    element.style.setProperty(\"left\", \"0\", priority);\n    element.style.setProperty(\"width\", \"100%\", priority);\n    element.style.setProperty(\"height\", \"100%\", priority);\n  }\n}","map":{"version":3,"names":["clear","drawParticle","drawParticlePlugin","drawPlugin","paintBase","paintImage","deepExtend","isSsr","getStyleFromHsl","getStyleFromRgb","rangeColorToHsl","rangeColorToRgb","generatedAttribute","setTransformValue","factor","newFactor","key","_a","newValue","undefined","Canvas","constructor","container","size","height","width","_context","_generated","_preDrawUpdaters","_postDrawUpdaters","_resizePlugins","_colorPlugins","_mutationObserver","MutationObserver","records","record","type","attributeName","_repairStyle","_fullScreen","actualOptions","fullScreen","enable","options","trail","particles","move","trailFill","_trailFill","backgroundMask","paint","length","color","_paintBase","opacity","image","_paintImage","draw","ctx","destroy","_b","disconnect","element","remove","_resetOriginalStyle","stop","cb","particle","delta","spawning","destroyed","radius","getRadius","pfColor","getFillColor","psColor","getStrokeColor","fColor","sColor","_getPluginParticleColors","_c","_d","zIndexOptions","zIndex","zOpacityFactor","zIndexFactor","opacityRate","bubble","value","strokeOpacity","zOpacity","zStrokeOpacity","transform","colorStyles","fill","stroke","_applyPreDrawUpdaters","context","composite","sizeRate","shadow","_applyPostDrawUpdaters","plugin","init","resize","_initStyle","_initCover","_initTrail","e","console","error","initBackground","observe","attributes","initUpdaters","initPlugins","background","elementStyle","style","backgroundColor","backgroundImage","backgroundPosition","position","backgroundRepeat","repeat","backgroundSize","plugins","push","particleFillColor","particleStrokeColor","updater","updaters","afterDraw","getColorStyles","getTransformValues","beforeDraw","loadCanvas","canvas","dataset","ariaHidden","_originalStyle","offsetHeight","offsetWidth","getContext","retina","cover","_coverColorStyle","pxRatio","pixelRatio","newSize","oldSize","Object","assign","started","resizeFactor","windowResize","needsRefresh","updateActualOptions","setDensity","_applyResizePlugins","refresh","call","updaterTransform","coverRgb","coverColor","r","g","b","a","_setFullScreenStyle","setProperty","fillColor","Promise","resolve","reject","img","document","createElement","addEventListener","evt","src","baseColor","originalStyle","top","left","priority","toString"],"sources":["/Users/adri22/Desktop/AVA-Bot/app-web/node_modules/tsparticles-engine/esm/Core/Canvas.js"],"sourcesContent":["import { clear, drawParticle, drawParticlePlugin, drawPlugin, paintBase, paintImage } from \"../Utils/CanvasUtils\";\nimport { deepExtend, isSsr } from \"../Utils/Utils\";\nimport { getStyleFromHsl, getStyleFromRgb, rangeColorToHsl, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { generatedAttribute } from \"./Utils/Constants\";\nfunction setTransformValue(factor, newFactor, key) {\n    var _a;\n    const newValue = newFactor[key];\n    if (newValue !== undefined) {\n        factor[key] = ((_a = factor[key]) !== null && _a !== void 0 ? _a : 1) * newValue;\n    }\n}\nexport class Canvas {\n    constructor(container) {\n        this.container = container;\n        this.size = {\n            height: 0,\n            width: 0,\n        };\n        this._context = null;\n        this._generated = false;\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        this._resizePlugins = [];\n        this._colorPlugins = [];\n        this._mutationObserver =\n            !isSsr() && typeof MutationObserver !== \"undefined\"\n                ? new MutationObserver((records) => {\n                    for (const record of records) {\n                        if (record.type === \"attributes\" && record.attributeName === \"style\") {\n                            this._repairStyle();\n                        }\n                    }\n                })\n                : undefined;\n    }\n    get _fullScreen() {\n        return this.container.actualOptions.fullScreen.enable;\n    }\n    clear() {\n        const options = this.container.actualOptions, trail = options.particles.move.trail, trailFill = this._trailFill;\n        if (options.backgroundMask.enable) {\n            this.paint();\n        }\n        else if (trail.enable && trail.length > 0 && trailFill) {\n            if (trailFill.color) {\n                this._paintBase(getStyleFromRgb(trailFill.color, trailFill.opacity));\n            }\n            else if (trailFill.image) {\n                this._paintImage(trailFill.image, trailFill.opacity);\n            }\n        }\n        else {\n            this.draw((ctx) => {\n                clear(ctx, this.size);\n            });\n        }\n    }\n    destroy() {\n        var _a, _b;\n        (_a = this._mutationObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\n        if (this._generated) {\n            (_b = this.element) === null || _b === void 0 ? void 0 : _b.remove();\n        }\n        else {\n            this._resetOriginalStyle();\n        }\n        this.stop();\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        this._resizePlugins = [];\n        this._colorPlugins = [];\n    }\n    draw(cb) {\n        if (!this._context) {\n            return;\n        }\n        return cb(this._context);\n    }\n    drawParticle(particle, delta) {\n        var _a;\n        if (particle.spawning || particle.destroyed) {\n            return;\n        }\n        const radius = particle.getRadius();\n        if (radius <= 0) {\n            return;\n        }\n        const pfColor = particle.getFillColor(), psColor = (_a = particle.getStrokeColor()) !== null && _a !== void 0 ? _a : pfColor;\n        let [fColor, sColor] = this._getPluginParticleColors(particle);\n        if (!fColor) {\n            fColor = pfColor;\n        }\n        if (!sColor) {\n            sColor = psColor;\n        }\n        if (!fColor && !sColor) {\n            return;\n        }\n        this.draw((ctx) => {\n            var _a, _b, _c, _d;\n            const options = this.container.actualOptions, zIndexOptions = particle.options.zIndex, zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate, opacity = (_c = (_a = particle.bubble.opacity) !== null && _a !== void 0 ? _a : (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1, strokeOpacity = (_d = particle.strokeOpacity) !== null && _d !== void 0 ? _d : opacity, zOpacity = opacity * zOpacityFactor, zStrokeOpacity = strokeOpacity * zOpacityFactor, transform = {}, colorStyles = {\n                fill: fColor ? getStyleFromHsl(fColor, zOpacity) : undefined,\n            };\n            colorStyles.stroke = sColor ? getStyleFromHsl(sColor, zStrokeOpacity) : colorStyles.fill;\n            this._applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform);\n            drawParticle({\n                container: this.container,\n                context: ctx,\n                particle,\n                delta,\n                colorStyles,\n                backgroundMask: options.backgroundMask.enable,\n                composite: options.backgroundMask.composite,\n                radius: radius * (1 - particle.zIndexFactor) ** zIndexOptions.sizeRate,\n                opacity: zOpacity,\n                shadow: particle.options.shadow,\n                transform,\n            });\n            this._applyPostDrawUpdaters(particle);\n        });\n    }\n    drawParticlePlugin(plugin, particle, delta) {\n        this.draw((ctx) => {\n            drawParticlePlugin(ctx, plugin, particle, delta);\n        });\n    }\n    drawPlugin(plugin, delta) {\n        this.draw((ctx) => {\n            drawPlugin(ctx, plugin, delta);\n        });\n    }\n    async init() {\n        var _a;\n        this.resize();\n        this._initStyle();\n        this._initCover();\n        try {\n            await this._initTrail();\n        }\n        catch (e) {\n            console.error(e);\n        }\n        this.initBackground();\n        if (this.element) {\n            (_a = this._mutationObserver) === null || _a === void 0 ? void 0 : _a.observe(this.element, { attributes: true });\n        }\n        this.initUpdaters();\n        this.initPlugins();\n        this.paint();\n    }\n    initBackground() {\n        const options = this.container.actualOptions, background = options.background, element = this.element, elementStyle = element === null || element === void 0 ? void 0 : element.style;\n        if (!elementStyle) {\n            return;\n        }\n        if (background.color) {\n            const color = rangeColorToRgb(background.color);\n            elementStyle.backgroundColor = color ? getStyleFromRgb(color, background.opacity) : \"\";\n        }\n        else {\n            elementStyle.backgroundColor = \"\";\n        }\n        elementStyle.backgroundImage = background.image || \"\";\n        elementStyle.backgroundPosition = background.position || \"\";\n        elementStyle.backgroundRepeat = background.repeat || \"\";\n        elementStyle.backgroundSize = background.size || \"\";\n    }\n    initPlugins() {\n        this._resizePlugins = [];\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.resize) {\n                this._resizePlugins.push(plugin);\n            }\n            if (plugin.particleFillColor || plugin.particleStrokeColor) {\n                this._colorPlugins.push(plugin);\n            }\n        }\n    }\n    initUpdaters() {\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        for (const updater of this.container.particles.updaters) {\n            if (updater.afterDraw) {\n                this._postDrawUpdaters.push(updater);\n            }\n            if (updater.getColorStyles || updater.getTransformValues || updater.beforeDraw) {\n                this._preDrawUpdaters.push(updater);\n            }\n        }\n    }\n    loadCanvas(canvas) {\n        var _a, _b;\n        if (this._generated) {\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        this._generated =\n            canvas.dataset && generatedAttribute in canvas.dataset\n                ? canvas.dataset[generatedAttribute] === \"true\"\n                : this._generated;\n        this.element = canvas;\n        this.element.ariaHidden = \"true\";\n        this._originalStyle = deepExtend({}, this.element.style);\n        this.size.height = canvas.offsetHeight;\n        this.size.width = canvas.offsetWidth;\n        this._context = this.element.getContext(\"2d\");\n        (_b = this._mutationObserver) === null || _b === void 0 ? void 0 : _b.observe(this.element, { attributes: true });\n        this.container.retina.init();\n        this.initBackground();\n    }\n    paint() {\n        const options = this.container.actualOptions;\n        this.draw((ctx) => {\n            if (options.backgroundMask.enable && options.backgroundMask.cover) {\n                clear(ctx, this.size);\n                this._paintBase(this._coverColorStyle);\n            }\n            else {\n                this._paintBase();\n            }\n        });\n    }\n    resize() {\n        if (!this.element) {\n            return;\n        }\n        const container = this.container, pxRatio = container.retina.pixelRatio, size = container.canvas.size, newSize = {\n            width: this.element.offsetWidth * pxRatio,\n            height: this.element.offsetHeight * pxRatio,\n        };\n        if (newSize.height === size.height &&\n            newSize.width === size.width &&\n            newSize.height === this.element.height &&\n            newSize.width === this.element.width) {\n            return;\n        }\n        const oldSize = Object.assign({}, size);\n        this.element.width = size.width = this.element.offsetWidth * pxRatio;\n        this.element.height = size.height = this.element.offsetHeight * pxRatio;\n        if (this.container.started) {\n            this.resizeFactor = {\n                width: size.width / oldSize.width,\n                height: size.height / oldSize.height,\n            };\n        }\n    }\n    stop() {\n        this.draw((ctx) => {\n            clear(ctx, this.size);\n        });\n    }\n    async windowResize() {\n        if (!this.element) {\n            return;\n        }\n        this.resize();\n        const container = this.container, needsRefresh = container.updateActualOptions();\n        container.particles.setDensity();\n        this._applyResizePlugins();\n        if (needsRefresh) {\n            await container.refresh();\n        }\n    }\n    _applyPostDrawUpdaters(particle) {\n        var _a;\n        for (const updater of this._postDrawUpdaters) {\n            (_a = updater.afterDraw) === null || _a === void 0 ? void 0 : _a.call(updater, particle);\n        }\n    }\n    _applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform) {\n        var _a;\n        for (const updater of this._preDrawUpdaters) {\n            if (updater.getColorStyles) {\n                const { fill, stroke } = updater.getColorStyles(particle, ctx, radius, zOpacity);\n                if (fill) {\n                    colorStyles.fill = fill;\n                }\n                if (stroke) {\n                    colorStyles.stroke = stroke;\n                }\n            }\n            if (updater.getTransformValues) {\n                const updaterTransform = updater.getTransformValues(particle);\n                for (const key in updaterTransform) {\n                    setTransformValue(transform, updaterTransform, key);\n                }\n            }\n            (_a = updater.beforeDraw) === null || _a === void 0 ? void 0 : _a.call(updater, particle);\n        }\n    }\n    _applyResizePlugins() {\n        for (const plugin of this._resizePlugins) {\n            if (plugin.resize) {\n                plugin.resize();\n            }\n        }\n    }\n    _getPluginParticleColors(particle) {\n        let fColor, sColor;\n        for (const plugin of this._colorPlugins) {\n            if (!fColor && plugin.particleFillColor) {\n                fColor = rangeColorToHsl(plugin.particleFillColor(particle));\n            }\n            if (!sColor && plugin.particleStrokeColor) {\n                sColor = rangeColorToHsl(plugin.particleStrokeColor(particle));\n            }\n            if (fColor && sColor) {\n                break;\n            }\n        }\n        return [fColor, sColor];\n    }\n    _initCover() {\n        const options = this.container.actualOptions, cover = options.backgroundMask.cover, color = cover.color, coverRgb = rangeColorToRgb(color);\n        if (coverRgb) {\n            const coverColor = {\n                r: coverRgb.r,\n                g: coverRgb.g,\n                b: coverRgb.b,\n                a: cover.opacity,\n            };\n            this._coverColorStyle = getStyleFromRgb(coverColor, coverColor.a);\n        }\n    }\n    _initStyle() {\n        const element = this.element, options = this.container.actualOptions;\n        if (!element) {\n            return;\n        }\n        if (this._fullScreen) {\n            this._originalStyle = deepExtend({}, element.style);\n            this._setFullScreenStyle();\n        }\n        else {\n            this._resetOriginalStyle();\n        }\n        for (const key in options.style) {\n            if (!key || !options.style) {\n                continue;\n            }\n            const value = options.style[key];\n            if (!value) {\n                continue;\n            }\n            element.style.setProperty(key, value, \"important\");\n        }\n    }\n    async _initTrail() {\n        const options = this.container.actualOptions, trail = options.particles.move.trail, trailFill = trail.fill;\n        if (!trail.enable) {\n            return;\n        }\n        if (trailFill.color) {\n            const fillColor = rangeColorToRgb(trailFill.color);\n            if (!fillColor) {\n                return;\n            }\n            const trail = options.particles.move.trail;\n            this._trailFill = {\n                color: Object.assign({}, fillColor),\n                opacity: 1 / trail.length,\n            };\n        }\n        else {\n            await new Promise((resolve, reject) => {\n                if (!trailFill.image) {\n                    return;\n                }\n                const img = document.createElement(\"img\");\n                img.addEventListener(\"load\", () => {\n                    this._trailFill = {\n                        image: img,\n                        opacity: 1 / trail.length,\n                    };\n                    resolve();\n                });\n                img.addEventListener(\"error\", (evt) => {\n                    reject(evt.error);\n                });\n                img.src = trailFill.image;\n            });\n        }\n    }\n    _paintBase(baseColor) {\n        this.draw((ctx) => {\n            paintBase(ctx, this.size, baseColor);\n        });\n    }\n    _paintImage(image, opacity) {\n        this.draw((ctx) => {\n            paintImage(ctx, this.size, image, opacity);\n        });\n    }\n    _repairStyle() {\n        var _a, _b;\n        const element = this.element;\n        if (!element) {\n            return;\n        }\n        (_a = this._mutationObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\n        this._initStyle();\n        this.initBackground();\n        (_b = this._mutationObserver) === null || _b === void 0 ? void 0 : _b.observe(element, { attributes: true });\n    }\n    _resetOriginalStyle() {\n        const element = this.element, originalStyle = this._originalStyle;\n        if (!(element && originalStyle)) {\n            return;\n        }\n        element.style.position = originalStyle.position;\n        element.style.zIndex = originalStyle.zIndex;\n        element.style.top = originalStyle.top;\n        element.style.left = originalStyle.left;\n        element.style.width = originalStyle.width;\n        element.style.height = originalStyle.height;\n    }\n    _setFullScreenStyle() {\n        const element = this.element;\n        if (!element) {\n            return;\n        }\n        const priority = \"important\";\n        element.style.setProperty(\"position\", \"fixed\", priority);\n        element.style.setProperty(\"z-index\", this.container.actualOptions.fullScreen.zIndex.toString(10), priority);\n        element.style.setProperty(\"top\", \"0\", priority);\n        element.style.setProperty(\"left\", \"0\", priority);\n        element.style.setProperty(\"width\", \"100%\", priority);\n        element.style.setProperty(\"height\", \"100%\", priority);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}