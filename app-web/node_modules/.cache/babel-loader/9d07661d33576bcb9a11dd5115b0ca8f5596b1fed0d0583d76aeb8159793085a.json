{"ast":null,"code":"export class InteractionManager {\n  constructor(engine, container) {\n    this.container = container;\n    this._engine = engine;\n    this._interactors = this._engine.plugins.getInteractors(this.container, true);\n    this._externalInteractors = [];\n    this._particleInteractors = [];\n  }\n  async externalInteract(delta) {\n    for (const interactor of this._externalInteractors) {\n      if (interactor.isEnabled()) {\n        await interactor.interact(delta);\n      }\n    }\n  }\n  handleClickMode(mode) {\n    for (const interactor of this._externalInteractors) {\n      if (interactor.handleClickMode) {\n        interactor.handleClickMode(mode);\n      }\n    }\n  }\n  init() {\n    this._externalInteractors = [];\n    this._particleInteractors = [];\n    for (const interactor of this._interactors) {\n      switch (interactor.type) {\n        case \"external\":\n          this._externalInteractors.push(interactor);\n          break;\n        case \"particles\":\n          this._particleInteractors.push(interactor);\n          break;\n      }\n      interactor.init();\n    }\n  }\n  async particlesInteract(particle, delta) {\n    for (const interactor of this._externalInteractors) {\n      interactor.clear(particle, delta);\n    }\n    for (const interactor of this._particleInteractors) {\n      if (interactor.isEnabled(particle)) {\n        await interactor.interact(particle, delta);\n      }\n    }\n  }\n  async reset(particle) {\n    for (const interactor of this._externalInteractors) {\n      if (interactor.isEnabled()) {\n        await interactor.reset(particle);\n      }\n    }\n    for (const interactor of this._particleInteractors) {\n      if (interactor.isEnabled(particle)) {\n        await interactor.reset(particle);\n      }\n    }\n  }\n}","map":{"version":3,"names":["InteractionManager","constructor","engine","container","_engine","_interactors","plugins","getInteractors","_externalInteractors","_particleInteractors","externalInteract","delta","interactor","isEnabled","interact","handleClickMode","mode","init","type","push","particlesInteract","particle","clear","reset"],"sources":["/Users/adri22/Desktop/AVA-Bot/app-web/node_modules/tsparticles-engine/esm/Core/Utils/InteractionManager.js"],"sourcesContent":["export class InteractionManager {\n    constructor(engine, container) {\n        this.container = container;\n        this._engine = engine;\n        this._interactors = this._engine.plugins.getInteractors(this.container, true);\n        this._externalInteractors = [];\n        this._particleInteractors = [];\n    }\n    async externalInteract(delta) {\n        for (const interactor of this._externalInteractors) {\n            if (interactor.isEnabled()) {\n                await interactor.interact(delta);\n            }\n        }\n    }\n    handleClickMode(mode) {\n        for (const interactor of this._externalInteractors) {\n            if (interactor.handleClickMode) {\n                interactor.handleClickMode(mode);\n            }\n        }\n    }\n    init() {\n        this._externalInteractors = [];\n        this._particleInteractors = [];\n        for (const interactor of this._interactors) {\n            switch (interactor.type) {\n                case \"external\":\n                    this._externalInteractors.push(interactor);\n                    break;\n                case \"particles\":\n                    this._particleInteractors.push(interactor);\n                    break;\n            }\n            interactor.init();\n        }\n    }\n    async particlesInteract(particle, delta) {\n        for (const interactor of this._externalInteractors) {\n            interactor.clear(particle, delta);\n        }\n        for (const interactor of this._particleInteractors) {\n            if (interactor.isEnabled(particle)) {\n                await interactor.interact(particle, delta);\n            }\n        }\n    }\n    async reset(particle) {\n        for (const interactor of this._externalInteractors) {\n            if (interactor.isEnabled()) {\n                await interactor.reset(particle);\n            }\n        }\n        for (const interactor of this._particleInteractors) {\n            if (interactor.isEnabled(particle)) {\n                await interactor.reset(particle);\n            }\n        }\n    }\n}\n"],"mappings":"AAAA,OAAO,MAAMA,kBAAkB,CAAC;EAC5BC,WAAWA,CAACC,MAAM,EAAEC,SAAS,EAAE;IAC3B,IAAI,CAACA,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,OAAO,GAAGF,MAAM;IACrB,IAAI,CAACG,YAAY,GAAG,IAAI,CAACD,OAAO,CAACE,OAAO,CAACC,cAAc,CAAC,IAAI,CAACJ,SAAS,EAAE,IAAI,CAAC;IAC7E,IAAI,CAACK,oBAAoB,GAAG,EAAE;IAC9B,IAAI,CAACC,oBAAoB,GAAG,EAAE;EAClC;EACA,MAAMC,gBAAgBA,CAACC,KAAK,EAAE;IAC1B,KAAK,MAAMC,UAAU,IAAI,IAAI,CAACJ,oBAAoB,EAAE;MAChD,IAAII,UAAU,CAACC,SAAS,EAAE,EAAE;QACxB,MAAMD,UAAU,CAACE,QAAQ,CAACH,KAAK,CAAC;MACpC;IACJ;EACJ;EACAI,eAAeA,CAACC,IAAI,EAAE;IAClB,KAAK,MAAMJ,UAAU,IAAI,IAAI,CAACJ,oBAAoB,EAAE;MAChD,IAAII,UAAU,CAACG,eAAe,EAAE;QAC5BH,UAAU,CAACG,eAAe,CAACC,IAAI,CAAC;MACpC;IACJ;EACJ;EACAC,IAAIA,CAAA,EAAG;IACH,IAAI,CAACT,oBAAoB,GAAG,EAAE;IAC9B,IAAI,CAACC,oBAAoB,GAAG,EAAE;IAC9B,KAAK,MAAMG,UAAU,IAAI,IAAI,CAACP,YAAY,EAAE;MACxC,QAAQO,UAAU,CAACM,IAAI;QACnB,KAAK,UAAU;UACX,IAAI,CAACV,oBAAoB,CAACW,IAAI,CAACP,UAAU,CAAC;UAC1C;QACJ,KAAK,WAAW;UACZ,IAAI,CAACH,oBAAoB,CAACU,IAAI,CAACP,UAAU,CAAC;UAC1C;MAAM;MAEdA,UAAU,CAACK,IAAI,EAAE;IACrB;EACJ;EACA,MAAMG,iBAAiBA,CAACC,QAAQ,EAAEV,KAAK,EAAE;IACrC,KAAK,MAAMC,UAAU,IAAI,IAAI,CAACJ,oBAAoB,EAAE;MAChDI,UAAU,CAACU,KAAK,CAACD,QAAQ,EAAEV,KAAK,CAAC;IACrC;IACA,KAAK,MAAMC,UAAU,IAAI,IAAI,CAACH,oBAAoB,EAAE;MAChD,IAAIG,UAAU,CAACC,SAAS,CAACQ,QAAQ,CAAC,EAAE;QAChC,MAAMT,UAAU,CAACE,QAAQ,CAACO,QAAQ,EAAEV,KAAK,CAAC;MAC9C;IACJ;EACJ;EACA,MAAMY,KAAKA,CAACF,QAAQ,EAAE;IAClB,KAAK,MAAMT,UAAU,IAAI,IAAI,CAACJ,oBAAoB,EAAE;MAChD,IAAII,UAAU,CAACC,SAAS,EAAE,EAAE;QACxB,MAAMD,UAAU,CAACW,KAAK,CAACF,QAAQ,CAAC;MACpC;IACJ;IACA,KAAK,MAAMT,UAAU,IAAI,IAAI,CAACH,oBAAoB,EAAE;MAChD,IAAIG,UAAU,CAACC,SAAS,CAACQ,QAAQ,CAAC,EAAE;QAChC,MAAMT,UAAU,CAACW,KAAK,CAACF,QAAQ,CAAC;MACpC;IACJ;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}