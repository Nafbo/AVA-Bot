{"ast":null,"code":"import { getRandom, getRangeValue, getStyleFromHsl, rangeColorToHsl } from \"tsparticles-engine\";\nimport { Twinkle } from \"./Options/Classes/Twinkle\";\nexport class TwinkleUpdater {\n  getColorStyles(particle, context, radius, opacity) {\n    const pOptions = particle.options,\n      twinkleOptions = pOptions.twinkle;\n    if (!twinkleOptions) {\n      return {};\n    }\n    const twinkle = twinkleOptions.particles,\n      twinkling = twinkle.enable && getRandom() < twinkle.frequency,\n      zIndexOptions = particle.options.zIndex,\n      zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate,\n      twinklingOpacity = twinkling ? getRangeValue(twinkle.opacity) * zOpacityFactor : opacity,\n      twinkleRgb = rangeColorToHsl(twinkle.color),\n      twinkleStyle = twinkleRgb ? getStyleFromHsl(twinkleRgb, twinklingOpacity) : undefined,\n      res = {},\n      needsTwinkle = twinkling && twinkleStyle;\n    res.fill = needsTwinkle ? twinkleStyle : undefined;\n    res.stroke = needsTwinkle ? twinkleStyle : undefined;\n    return res;\n  }\n  init() {}\n  isEnabled(particle) {\n    const pOptions = particle.options,\n      twinkleOptions = pOptions.twinkle;\n    if (!twinkleOptions) {\n      return false;\n    }\n    return twinkleOptions.particles.enable;\n  }\n  loadOptions(options) {\n    if (!options.twinkle) {\n      options.twinkle = new Twinkle();\n    }\n    for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      sources[_key - 1] = arguments[_key];\n    }\n    for (const source of sources) {\n      options.twinkle.load(source === null || source === void 0 ? void 0 : source.twinkle);\n    }\n  }\n  update() {}\n}","map":{"version":3,"names":["getRandom","getRangeValue","getStyleFromHsl","rangeColorToHsl","Twinkle","TwinkleUpdater","getColorStyles","particle","context","radius","opacity","pOptions","options","twinkleOptions","twinkle","particles","twinkling","enable","frequency","zIndexOptions","zIndex","zOpacityFactor","zIndexFactor","opacityRate","twinklingOpacity","twinkleRgb","color","twinkleStyle","undefined","res","needsTwinkle","fill","stroke","init","isEnabled","loadOptions","_len","arguments","length","sources","Array","_key","source","load","update"],"sources":["/Users/adri22/Desktop/AVA-Bot/app-web/node_modules/tsparticles-updater-twinkle/esm/TwinkleUpdater.js"],"sourcesContent":["import { getRandom, getRangeValue, getStyleFromHsl, rangeColorToHsl } from \"tsparticles-engine\";\nimport { Twinkle } from \"./Options/Classes/Twinkle\";\nexport class TwinkleUpdater {\n    getColorStyles(particle, context, radius, opacity) {\n        const pOptions = particle.options, twinkleOptions = pOptions.twinkle;\n        if (!twinkleOptions) {\n            return {};\n        }\n        const twinkle = twinkleOptions.particles, twinkling = twinkle.enable && getRandom() < twinkle.frequency, zIndexOptions = particle.options.zIndex, zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate, twinklingOpacity = twinkling ? getRangeValue(twinkle.opacity) * zOpacityFactor : opacity, twinkleRgb = rangeColorToHsl(twinkle.color), twinkleStyle = twinkleRgb ? getStyleFromHsl(twinkleRgb, twinklingOpacity) : undefined, res = {}, needsTwinkle = twinkling && twinkleStyle;\n        res.fill = needsTwinkle ? twinkleStyle : undefined;\n        res.stroke = needsTwinkle ? twinkleStyle : undefined;\n        return res;\n    }\n    init() {\n    }\n    isEnabled(particle) {\n        const pOptions = particle.options, twinkleOptions = pOptions.twinkle;\n        if (!twinkleOptions) {\n            return false;\n        }\n        return twinkleOptions.particles.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.twinkle) {\n            options.twinkle = new Twinkle();\n        }\n        for (const source of sources) {\n            options.twinkle.load(source === null || source === void 0 ? void 0 : source.twinkle);\n        }\n    }\n    update() {\n    }\n}\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,aAAa,EAAEC,eAAe,EAAEC,eAAe,QAAQ,oBAAoB;AAC/F,SAASC,OAAO,QAAQ,2BAA2B;AACnD,OAAO,MAAMC,cAAc,CAAC;EACxBC,cAAcA,CAACC,QAAQ,EAAEC,OAAO,EAAEC,MAAM,EAAEC,OAAO,EAAE;IAC/C,MAAMC,QAAQ,GAAGJ,QAAQ,CAACK,OAAO;MAAEC,cAAc,GAAGF,QAAQ,CAACG,OAAO;IACpE,IAAI,CAACD,cAAc,EAAE;MACjB,OAAO,CAAC,CAAC;IACb;IACA,MAAMC,OAAO,GAAGD,cAAc,CAACE,SAAS;MAAEC,SAAS,GAAGF,OAAO,CAACG,MAAM,IAAIjB,SAAS,EAAE,GAAGc,OAAO,CAACI,SAAS;MAAEC,aAAa,GAAGZ,QAAQ,CAACK,OAAO,CAACQ,MAAM;MAAEC,cAAc,GAAG,CAAC,CAAC,GAAGd,QAAQ,CAACe,YAAY,KAAKH,aAAa,CAACI,WAAW;MAAEC,gBAAgB,GAAGR,SAAS,GAAGf,aAAa,CAACa,OAAO,CAACJ,OAAO,CAAC,GAAGW,cAAc,GAAGX,OAAO;MAAEe,UAAU,GAAGtB,eAAe,CAACW,OAAO,CAACY,KAAK,CAAC;MAAEC,YAAY,GAAGF,UAAU,GAAGvB,eAAe,CAACuB,UAAU,EAAED,gBAAgB,CAAC,GAAGI,SAAS;MAAEC,GAAG,GAAG,CAAC,CAAC;MAAEC,YAAY,GAAGd,SAAS,IAAIW,YAAY;IAC7eE,GAAG,CAACE,IAAI,GAAGD,YAAY,GAAGH,YAAY,GAAGC,SAAS;IAClDC,GAAG,CAACG,MAAM,GAAGF,YAAY,GAAGH,YAAY,GAAGC,SAAS;IACpD,OAAOC,GAAG;EACd;EACAI,IAAIA,CAAA,EAAG,CACP;EACAC,SAASA,CAAC3B,QAAQ,EAAE;IAChB,MAAMI,QAAQ,GAAGJ,QAAQ,CAACK,OAAO;MAAEC,cAAc,GAAGF,QAAQ,CAACG,OAAO;IACpE,IAAI,CAACD,cAAc,EAAE;MACjB,OAAO,KAAK;IAChB;IACA,OAAOA,cAAc,CAACE,SAAS,CAACE,MAAM;EAC1C;EACAkB,WAAWA,CAACvB,OAAO,EAAc;IAC7B,IAAI,CAACA,OAAO,CAACE,OAAO,EAAE;MAClBF,OAAO,CAACE,OAAO,GAAG,IAAIV,OAAO,EAAE;IACnC;IAAC,SAAAgC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAHmBC,OAAO,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAAPF,OAAO,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;IAAA;IAI3B,KAAK,MAAMC,MAAM,IAAIH,OAAO,EAAE;MAC1B3B,OAAO,CAACE,OAAO,CAAC6B,IAAI,CAACD,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAAC5B,OAAO,CAAC;IACxF;EACJ;EACA8B,MAAMA,CAAA,EAAG,CACT;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}