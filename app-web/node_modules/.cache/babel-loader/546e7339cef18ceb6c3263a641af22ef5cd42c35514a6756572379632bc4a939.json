{"ast":null,"code":"import { Circle, ExternalInteractorBase, Vector, clamp, getDistances, getEasing, isInArray, mouseMoveEvent } from \"tsparticles-engine\";\nimport { Attract } from \"./Options/Classes/Attract\";\nexport class Attractor extends ExternalInteractorBase {\n  constructor(engine, container) {\n    super(container);\n    this._engine = engine;\n    if (!container.attract) {\n      container.attract = {\n        particles: []\n      };\n    }\n    this.handleClickMode = mode => {\n      const options = this.container.actualOptions,\n        attract = options.interactivity.modes.attract;\n      if (!attract || mode !== \"attract\") {\n        return;\n      }\n      if (!container.attract) {\n        container.attract = {\n          particles: []\n        };\n      }\n      container.attract.clicking = true;\n      container.attract.count = 0;\n      for (const particle of container.attract.particles) {\n        if (!this.isEnabled(particle)) {\n          continue;\n        }\n        particle.velocity.setTo(particle.initialVelocity);\n      }\n      container.attract.particles = [];\n      container.attract.finish = false;\n      setTimeout(() => {\n        if (!container.destroyed) {\n          if (!container.attract) {\n            container.attract = {\n              particles: []\n            };\n          }\n          container.attract.clicking = false;\n        }\n      }, attract.duration * 1000);\n    };\n  }\n  clear() {}\n  init() {\n    const container = this.container,\n      attract = container.actualOptions.interactivity.modes.attract;\n    if (!attract) {\n      return;\n    }\n    container.retina.attractModeDistance = attract.distance * container.retina.pixelRatio;\n  }\n  async interact() {\n    const container = this.container,\n      options = container.actualOptions,\n      mouseMoveStatus = container.interactivity.status === mouseMoveEvent,\n      events = options.interactivity.events,\n      hoverEnabled = events.onHover.enable,\n      hoverMode = events.onHover.mode,\n      clickEnabled = events.onClick.enable,\n      clickMode = events.onClick.mode;\n    if (mouseMoveStatus && hoverEnabled && isInArray(\"attract\", hoverMode)) {\n      this.hoverAttract();\n    } else if (clickEnabled && isInArray(\"attract\", clickMode)) {\n      this.clickAttract();\n    }\n  }\n  isEnabled(particle) {\n    var _a;\n    const container = this.container,\n      options = container.actualOptions,\n      mouse = container.interactivity.mouse,\n      events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : options.interactivity).events;\n    if ((!mouse.position || !events.onHover.enable) && (!mouse.clickPosition || !events.onClick.enable)) {\n      return false;\n    }\n    const hoverMode = events.onHover.mode,\n      clickMode = events.onClick.mode;\n    return isInArray(\"attract\", hoverMode) || isInArray(\"attract\", clickMode);\n  }\n  loadModeOptions(options) {\n    if (!options.attract) {\n      options.attract = new Attract();\n    }\n    for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      sources[_key - 1] = arguments[_key];\n    }\n    for (const source of sources) {\n      options.attract.load(source === null || source === void 0 ? void 0 : source.attract);\n    }\n  }\n  reset() {}\n  clickAttract() {\n    const container = this.container;\n    if (!container.attract) {\n      container.attract = {\n        particles: []\n      };\n    }\n    if (!container.attract.finish) {\n      if (!container.attract.count) {\n        container.attract.count = 0;\n      }\n      container.attract.count++;\n      if (container.attract.count === container.particles.count) {\n        container.attract.finish = true;\n      }\n    }\n    if (container.attract.clicking) {\n      const mousePos = container.interactivity.mouse.clickPosition,\n        attractRadius = container.retina.attractModeDistance;\n      if (!attractRadius || attractRadius < 0 || !mousePos) {\n        return;\n      }\n      this.processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\n    } else if (container.attract.clicking === false) {\n      container.attract.particles = [];\n    }\n    return;\n  }\n  hoverAttract() {\n    const container = this.container,\n      mousePos = container.interactivity.mouse.position,\n      attractRadius = container.retina.attractModeDistance;\n    if (!attractRadius || attractRadius < 0 || !mousePos) {\n      return;\n    }\n    this.processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\n  }\n  processAttract(position, attractRadius, area) {\n    const container = this.container,\n      attractOptions = container.actualOptions.interactivity.modes.attract;\n    if (!attractOptions) {\n      return;\n    }\n    const query = container.particles.quadTree.query(area, p => this.isEnabled(p));\n    for (const particle of query) {\n      const {\n        dx,\n        dy,\n        distance\n      } = getDistances(particle.position, position);\n      const velocity = attractOptions.speed * attractOptions.factor;\n      const attractFactor = clamp(getEasing(attractOptions.easing)(1 - distance / attractRadius) * velocity, 0, attractOptions.maxSpeed);\n      const normVec = Vector.create(distance === 0 ? velocity : dx / distance * attractFactor, distance === 0 ? velocity : dy / distance * attractFactor);\n      particle.position.subFrom(normVec);\n    }\n  }\n}","map":{"version":3,"names":["Circle","ExternalInteractorBase","Vector","clamp","getDistances","getEasing","isInArray","mouseMoveEvent","Attract","Attractor","constructor","engine","container","_engine","attract","particles","handleClickMode","mode","options","actualOptions","interactivity","modes","clicking","count","particle","isEnabled","velocity","setTo","initialVelocity","finish","setTimeout","destroyed","duration","clear","init","retina","attractModeDistance","distance","pixelRatio","interact","mouseMoveStatus","status","events","hoverEnabled","onHover","enable","hoverMode","clickEnabled","onClick","clickMode","hoverAttract","clickAttract","_a","mouse","position","clickPosition","loadModeOptions","_len","arguments","length","sources","Array","_key","source","load","reset","mousePos","attractRadius","processAttract","x","y","area","attractOptions","query","quadTree","p","dx","dy","speed","factor","attractFactor","easing","maxSpeed","normVec","create","subFrom"],"sources":["/Users/adri22/Desktop/AVA-Bot/app-web/node_modules/tsparticles-interaction-external-attract/esm/Attractor.js"],"sourcesContent":["import { Circle, ExternalInteractorBase, Vector, clamp, getDistances, getEasing, isInArray, mouseMoveEvent, } from \"tsparticles-engine\";\nimport { Attract } from \"./Options/Classes/Attract\";\nexport class Attractor extends ExternalInteractorBase {\n    constructor(engine, container) {\n        super(container);\n        this._engine = engine;\n        if (!container.attract) {\n            container.attract = { particles: [] };\n        }\n        this.handleClickMode = (mode) => {\n            const options = this.container.actualOptions, attract = options.interactivity.modes.attract;\n            if (!attract || mode !== \"attract\") {\n                return;\n            }\n            if (!container.attract) {\n                container.attract = { particles: [] };\n            }\n            container.attract.clicking = true;\n            container.attract.count = 0;\n            for (const particle of container.attract.particles) {\n                if (!this.isEnabled(particle)) {\n                    continue;\n                }\n                particle.velocity.setTo(particle.initialVelocity);\n            }\n            container.attract.particles = [];\n            container.attract.finish = false;\n            setTimeout(() => {\n                if (!container.destroyed) {\n                    if (!container.attract) {\n                        container.attract = { particles: [] };\n                    }\n                    container.attract.clicking = false;\n                }\n            }, attract.duration * 1000);\n        };\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, attract = container.actualOptions.interactivity.modes.attract;\n        if (!attract) {\n            return;\n        }\n        container.retina.attractModeDistance = attract.distance * container.retina.pixelRatio;\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, events = options.interactivity.events, hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, clickEnabled = events.onClick.enable, clickMode = events.onClick.mode;\n        if (mouseMoveStatus && hoverEnabled && isInArray(\"attract\", hoverMode)) {\n            this.hoverAttract();\n        }\n        else if (clickEnabled && isInArray(\"attract\", clickMode)) {\n            this.clickAttract();\n        }\n    }\n    isEnabled(particle) {\n        var _a;\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : options.interactivity).events;\n        if ((!mouse.position || !events.onHover.enable) && (!mouse.clickPosition || !events.onClick.enable)) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode, clickMode = events.onClick.mode;\n        return isInArray(\"attract\", hoverMode) || isInArray(\"attract\", clickMode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.attract) {\n            options.attract = new Attract();\n        }\n        for (const source of sources) {\n            options.attract.load(source === null || source === void 0 ? void 0 : source.attract);\n        }\n    }\n    reset() {\n    }\n    clickAttract() {\n        const container = this.container;\n        if (!container.attract) {\n            container.attract = { particles: [] };\n        }\n        if (!container.attract.finish) {\n            if (!container.attract.count) {\n                container.attract.count = 0;\n            }\n            container.attract.count++;\n            if (container.attract.count === container.particles.count) {\n                container.attract.finish = true;\n            }\n        }\n        if (container.attract.clicking) {\n            const mousePos = container.interactivity.mouse.clickPosition, attractRadius = container.retina.attractModeDistance;\n            if (!attractRadius || attractRadius < 0 || !mousePos) {\n                return;\n            }\n            this.processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\n        }\n        else if (container.attract.clicking === false) {\n            container.attract.particles = [];\n        }\n        return;\n    }\n    hoverAttract() {\n        const container = this.container, mousePos = container.interactivity.mouse.position, attractRadius = container.retina.attractModeDistance;\n        if (!attractRadius || attractRadius < 0 || !mousePos) {\n            return;\n        }\n        this.processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\n    }\n    processAttract(position, attractRadius, area) {\n        const container = this.container, attractOptions = container.actualOptions.interactivity.modes.attract;\n        if (!attractOptions) {\n            return;\n        }\n        const query = container.particles.quadTree.query(area, (p) => this.isEnabled(p));\n        for (const particle of query) {\n            const { dx, dy, distance } = getDistances(particle.position, position);\n            const velocity = attractOptions.speed * attractOptions.factor;\n            const attractFactor = clamp(getEasing(attractOptions.easing)(1 - distance / attractRadius) * velocity, 0, attractOptions.maxSpeed);\n            const normVec = Vector.create(distance === 0 ? velocity : (dx / distance) * attractFactor, distance === 0 ? velocity : (dy / distance) * attractFactor);\n            particle.position.subFrom(normVec);\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}