{"ast":null,"code":"import { downloadSvgImage, loadImage, replaceImageColor } from \"./Utils\";\nexport class ImageDrawer {\n  constructor() {\n    this._images = [];\n  }\n  addImage(container, image) {\n    const containerImages = this.getImages(container);\n    containerImages === null || containerImages === void 0 ? void 0 : containerImages.images.push(image);\n  }\n  destroy() {\n    this._images = [];\n  }\n  draw(context, particle, radius, opacity) {\n    var _a;\n    const image = particle.image,\n      element = image === null || image === void 0 ? void 0 : image.element;\n    if (!element) {\n      return;\n    }\n    const ratio = (_a = image === null || image === void 0 ? void 0 : image.ratio) !== null && _a !== void 0 ? _a : 1,\n      pos = {\n        x: -radius,\n        y: -radius\n      };\n    context.globalAlpha = opacity;\n    context.drawImage(element, pos.x, pos.y, radius * 2, radius * 2 / ratio);\n    context.globalAlpha = 1;\n  }\n  getImages(container) {\n    const containerImages = this._images.find(t => t.id === container.id);\n    if (!containerImages) {\n      this._images.push({\n        id: container.id,\n        images: []\n      });\n      return this.getImages(container);\n    } else {\n      return containerImages;\n    }\n  }\n  getSidesCount() {\n    return 12;\n  }\n  loadShape(particle) {\n    if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n      return;\n    }\n    const container = particle.container,\n      images = this.getImages(container).images,\n      imageData = particle.shapeData,\n      image = images.find(t => t.source === imageData.src);\n    if (!image) {\n      this.loadImageShape(container, imageData).then(() => {\n        this.loadShape(particle);\n      });\n    }\n  }\n  particleInit(container, particle) {\n    var _a;\n    if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n      return;\n    }\n    const images = this.getImages(container).images,\n      imageData = particle.shapeData,\n      color = particle.getFillColor(),\n      replaceColor = (_a = imageData.replaceColor) !== null && _a !== void 0 ? _a : imageData.replace_color,\n      image = images.find(t => t.source === imageData.src);\n    if (!image) {\n      return;\n    }\n    if (image.loading) {\n      setTimeout(() => {\n        this.particleInit(container, particle);\n      });\n      return;\n    }\n    (async () => {\n      var _a, _b;\n      let imageRes;\n      if (image.svgData && color) {\n        imageRes = await replaceImageColor(image, imageData, color, particle);\n      } else {\n        imageRes = {\n          color,\n          data: image,\n          element: image.element,\n          loaded: true,\n          ratio: imageData.width / imageData.height,\n          replaceColor: replaceColor,\n          source: imageData.src\n        };\n      }\n      if (!imageRes.ratio) {\n        imageRes.ratio = 1;\n      }\n      const fill = (_a = imageData.fill) !== null && _a !== void 0 ? _a : particle.fill,\n        close = (_b = imageData.close) !== null && _b !== void 0 ? _b : particle.close,\n        imageShape = {\n          image: imageRes,\n          fill,\n          close\n        };\n      particle.image = imageShape.image;\n      particle.fill = imageShape.fill;\n      particle.close = imageShape.close;\n    })();\n  }\n  async loadImageShape(container, imageShape) {\n    var _a;\n    const source = imageShape.src;\n    if (!source) {\n      throw new Error(\"Error tsParticles - No image.src\");\n    }\n    try {\n      const image = {\n        source: source,\n        type: source.substring(source.length - 3),\n        error: false,\n        loading: true\n      };\n      this.addImage(container, image);\n      const imageFunc = ((_a = imageShape.replaceColor) !== null && _a !== void 0 ? _a : imageShape.replace_color) ? downloadSvgImage : loadImage;\n      await imageFunc(image);\n    } catch (_b) {\n      throw new Error(`tsParticles error - ${imageShape.src} not found`);\n    }\n  }\n}","map":{"version":3,"names":["downloadSvgImage","loadImage","replaceImageColor","ImageDrawer","constructor","_images","addImage","container","image","containerImages","getImages","images","push","destroy","draw","context","particle","radius","opacity","_a","element","ratio","pos","x","y","globalAlpha","drawImage","find","t","id","getSidesCount","loadShape","shape","imageData","shapeData","source","src","loadImageShape","then","particleInit","color","getFillColor","replaceColor","replace_color","loading","setTimeout","_b","imageRes","svgData","data","loaded","width","height","fill","close","imageShape","Error","type","substring","length","error","imageFunc"],"sources":["/Users/adri22/Desktop/AVA-Bot/app-web/node_modules/tsparticles-shape-image/esm/ImageDrawer.js"],"sourcesContent":["import { downloadSvgImage, loadImage, replaceImageColor } from \"./Utils\";\nexport class ImageDrawer {\n    constructor() {\n        this._images = [];\n    }\n    addImage(container, image) {\n        const containerImages = this.getImages(container);\n        containerImages === null || containerImages === void 0 ? void 0 : containerImages.images.push(image);\n    }\n    destroy() {\n        this._images = [];\n    }\n    draw(context, particle, radius, opacity) {\n        var _a;\n        const image = particle.image, element = image === null || image === void 0 ? void 0 : image.element;\n        if (!element) {\n            return;\n        }\n        const ratio = (_a = image === null || image === void 0 ? void 0 : image.ratio) !== null && _a !== void 0 ? _a : 1, pos = {\n            x: -radius,\n            y: -radius,\n        };\n        context.globalAlpha = opacity;\n        context.drawImage(element, pos.x, pos.y, radius * 2, (radius * 2) / ratio);\n        context.globalAlpha = 1;\n    }\n    getImages(container) {\n        const containerImages = this._images.find((t) => t.id === container.id);\n        if (!containerImages) {\n            this._images.push({\n                id: container.id,\n                images: [],\n            });\n            return this.getImages(container);\n        }\n        else {\n            return containerImages;\n        }\n    }\n    getSidesCount() {\n        return 12;\n    }\n    loadShape(particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        const container = particle.container, images = this.getImages(container).images, imageData = particle.shapeData, image = images.find((t) => t.source === imageData.src);\n        if (!image) {\n            this.loadImageShape(container, imageData).then(() => {\n                this.loadShape(particle);\n            });\n        }\n    }\n    particleInit(container, particle) {\n        var _a;\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        const images = this.getImages(container).images, imageData = particle.shapeData, color = particle.getFillColor(), replaceColor = (_a = imageData.replaceColor) !== null && _a !== void 0 ? _a : imageData.replace_color, image = images.find((t) => t.source === imageData.src);\n        if (!image) {\n            return;\n        }\n        if (image.loading) {\n            setTimeout(() => {\n                this.particleInit(container, particle);\n            });\n            return;\n        }\n        (async () => {\n            var _a, _b;\n            let imageRes;\n            if (image.svgData && color) {\n                imageRes = await replaceImageColor(image, imageData, color, particle);\n            }\n            else {\n                imageRes = {\n                    color,\n                    data: image,\n                    element: image.element,\n                    loaded: true,\n                    ratio: imageData.width / imageData.height,\n                    replaceColor: replaceColor,\n                    source: imageData.src,\n                };\n            }\n            if (!imageRes.ratio) {\n                imageRes.ratio = 1;\n            }\n            const fill = (_a = imageData.fill) !== null && _a !== void 0 ? _a : particle.fill, close = (_b = imageData.close) !== null && _b !== void 0 ? _b : particle.close, imageShape = {\n                image: imageRes,\n                fill,\n                close,\n            };\n            particle.image = imageShape.image;\n            particle.fill = imageShape.fill;\n            particle.close = imageShape.close;\n        })();\n    }\n    async loadImageShape(container, imageShape) {\n        var _a;\n        const source = imageShape.src;\n        if (!source) {\n            throw new Error(\"Error tsParticles - No image.src\");\n        }\n        try {\n            const image = {\n                source: source,\n                type: source.substring(source.length - 3),\n                error: false,\n                loading: true,\n            };\n            this.addImage(container, image);\n            const imageFunc = ((_a = imageShape.replaceColor) !== null && _a !== void 0 ? _a : imageShape.replace_color) ? downloadSvgImage : loadImage;\n            await imageFunc(image);\n        }\n        catch (_b) {\n            throw new Error(`tsParticles error - ${imageShape.src} not found`);\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}