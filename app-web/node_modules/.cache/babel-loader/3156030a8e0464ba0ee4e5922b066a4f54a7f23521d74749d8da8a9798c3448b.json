{"ast":null,"code":"import { drawLine, drawTriangle, getDistance, getDistances, getStyleFromRgb, rangeColorToRgb } from \"tsparticles-engine\";\nexport function drawLinkLine(context, width, begin, end, maxDistance, canvasSize, warp, backgroundMask, composite, colorLine, opacity, shadow) {\n  let drawn = false;\n  if (getDistance(begin, end) <= maxDistance) {\n    drawLine(context, begin, end);\n    drawn = true;\n  } else if (warp) {\n    let pi1;\n    let pi2;\n    const endNE = {\n      x: end.x - canvasSize.width,\n      y: end.y\n    };\n    const d1 = getDistances(begin, endNE);\n    if (d1.distance <= maxDistance) {\n      const yi = begin.y - d1.dy / d1.dx * begin.x;\n      pi1 = {\n        x: 0,\n        y: yi\n      };\n      pi2 = {\n        x: canvasSize.width,\n        y: yi\n      };\n    } else {\n      const endSW = {\n        x: end.x,\n        y: end.y - canvasSize.height\n      };\n      const d2 = getDistances(begin, endSW);\n      if (d2.distance <= maxDistance) {\n        const yi = begin.y - d2.dy / d2.dx * begin.x;\n        const xi = -yi / (d2.dy / d2.dx);\n        pi1 = {\n          x: xi,\n          y: 0\n        };\n        pi2 = {\n          x: xi,\n          y: canvasSize.height\n        };\n      } else {\n        const endSE = {\n          x: end.x - canvasSize.width,\n          y: end.y - canvasSize.height\n        };\n        const d3 = getDistances(begin, endSE);\n        if (d3.distance <= maxDistance) {\n          const yi = begin.y - d3.dy / d3.dx * begin.x;\n          const xi = -yi / (d3.dy / d3.dx);\n          pi1 = {\n            x: xi,\n            y: yi\n          };\n          pi2 = {\n            x: pi1.x + canvasSize.width,\n            y: pi1.y + canvasSize.height\n          };\n        }\n      }\n    }\n    if (pi1 && pi2) {\n      drawLine(context, begin, pi1);\n      drawLine(context, end, pi2);\n      drawn = true;\n    }\n  }\n  if (!drawn) {\n    return;\n  }\n  context.lineWidth = width;\n  if (backgroundMask) {\n    context.globalCompositeOperation = composite;\n  }\n  context.strokeStyle = getStyleFromRgb(colorLine, opacity);\n  if (shadow.enable) {\n    const shadowColor = rangeColorToRgb(shadow.color);\n    if (shadowColor) {\n      context.shadowBlur = shadow.blur;\n      context.shadowColor = getStyleFromRgb(shadowColor);\n    }\n  }\n  context.stroke();\n}\nexport function drawLinkTriangle(context, pos1, pos2, pos3, backgroundMask, composite, colorTriangle, opacityTriangle) {\n  drawTriangle(context, pos1, pos2, pos3);\n  if (backgroundMask) {\n    context.globalCompositeOperation = composite;\n  }\n  context.fillStyle = getStyleFromRgb(colorTriangle, opacityTriangle);\n  context.fill();\n}","map":{"version":3,"names":["drawLine","drawTriangle","getDistance","getDistances","getStyleFromRgb","rangeColorToRgb","drawLinkLine","context","width","begin","end","maxDistance","canvasSize","warp","backgroundMask","composite","colorLine","opacity","shadow","drawn","pi1","pi2","endNE","x","y","d1","distance","yi","dy","dx","endSW","height","d2","xi","endSE","d3","lineWidth","globalCompositeOperation","strokeStyle","enable","shadowColor","color","shadowBlur","blur","stroke","drawLinkTriangle","pos1","pos2","pos3","colorTriangle","opacityTriangle","fillStyle","fill"],"sources":["/Users/adri22/Desktop/AVA-Bot/app-web/node_modules/tsparticles-interaction-particles-links/esm/Utils.js"],"sourcesContent":["import { drawLine, drawTriangle, getDistance, getDistances, getStyleFromRgb, rangeColorToRgb, } from \"tsparticles-engine\";\nexport function drawLinkLine(context, width, begin, end, maxDistance, canvasSize, warp, backgroundMask, composite, colorLine, opacity, shadow) {\n    let drawn = false;\n    if (getDistance(begin, end) <= maxDistance) {\n        drawLine(context, begin, end);\n        drawn = true;\n    }\n    else if (warp) {\n        let pi1;\n        let pi2;\n        const endNE = {\n            x: end.x - canvasSize.width,\n            y: end.y,\n        };\n        const d1 = getDistances(begin, endNE);\n        if (d1.distance <= maxDistance) {\n            const yi = begin.y - (d1.dy / d1.dx) * begin.x;\n            pi1 = { x: 0, y: yi };\n            pi2 = { x: canvasSize.width, y: yi };\n        }\n        else {\n            const endSW = {\n                x: end.x,\n                y: end.y - canvasSize.height,\n            };\n            const d2 = getDistances(begin, endSW);\n            if (d2.distance <= maxDistance) {\n                const yi = begin.y - (d2.dy / d2.dx) * begin.x;\n                const xi = -yi / (d2.dy / d2.dx);\n                pi1 = { x: xi, y: 0 };\n                pi2 = { x: xi, y: canvasSize.height };\n            }\n            else {\n                const endSE = {\n                    x: end.x - canvasSize.width,\n                    y: end.y - canvasSize.height,\n                };\n                const d3 = getDistances(begin, endSE);\n                if (d3.distance <= maxDistance) {\n                    const yi = begin.y - (d3.dy / d3.dx) * begin.x;\n                    const xi = -yi / (d3.dy / d3.dx);\n                    pi1 = { x: xi, y: yi };\n                    pi2 = { x: pi1.x + canvasSize.width, y: pi1.y + canvasSize.height };\n                }\n            }\n        }\n        if (pi1 && pi2) {\n            drawLine(context, begin, pi1);\n            drawLine(context, end, pi2);\n            drawn = true;\n        }\n    }\n    if (!drawn) {\n        return;\n    }\n    context.lineWidth = width;\n    if (backgroundMask) {\n        context.globalCompositeOperation = composite;\n    }\n    context.strokeStyle = getStyleFromRgb(colorLine, opacity);\n    if (shadow.enable) {\n        const shadowColor = rangeColorToRgb(shadow.color);\n        if (shadowColor) {\n            context.shadowBlur = shadow.blur;\n            context.shadowColor = getStyleFromRgb(shadowColor);\n        }\n    }\n    context.stroke();\n}\nexport function drawLinkTriangle(context, pos1, pos2, pos3, backgroundMask, composite, colorTriangle, opacityTriangle) {\n    drawTriangle(context, pos1, pos2, pos3);\n    if (backgroundMask) {\n        context.globalCompositeOperation = composite;\n    }\n    context.fillStyle = getStyleFromRgb(colorTriangle, opacityTriangle);\n    context.fill();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}