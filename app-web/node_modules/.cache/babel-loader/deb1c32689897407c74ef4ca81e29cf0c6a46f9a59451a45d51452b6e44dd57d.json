{"ast":null,"code":"import { getStyleFromHsl } from \"tsparticles-engine\";\nconst currentColorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\nfunction replaceColorSvg(imageShape, color, opacity) {\n  const {\n    svgData\n  } = imageShape;\n  if (!svgData) {\n    return \"\";\n  }\n  const colorStyle = getStyleFromHsl(color, opacity);\n  if (svgData.includes(\"fill\")) {\n    return svgData.replace(currentColorRegex, () => colorStyle);\n  }\n  const preFillIndex = svgData.indexOf(\">\");\n  return `${svgData.substring(0, preFillIndex)} fill=\"${colorStyle}\"${svgData.substring(preFillIndex)}`;\n}\nexport async function loadImage(image) {\n  return new Promise(resolve => {\n    image.loading = true;\n    const img = new Image();\n    image.element = img;\n    img.addEventListener(\"load\", () => {\n      image.loading = false;\n      resolve();\n    });\n    img.addEventListener(\"error\", () => {\n      image.element = undefined;\n      image.error = true;\n      image.loading = false;\n      console.error(`Error tsParticles - loading image: ${image.source}`);\n      resolve();\n    });\n    img.src = image.source;\n  });\n}\nexport async function downloadSvgImage(image) {\n  if (image.type !== \"svg\") {\n    await loadImage(image);\n    return;\n  }\n  image.loading = true;\n  const response = await fetch(image.source);\n  if (!response.ok) {\n    console.error(\"Error tsParticles - Image not found\");\n    image.error = true;\n  }\n  if (!image.error) {\n    image.svgData = await response.text();\n  }\n  image.loading = false;\n}\nexport function replaceImageColor(image, imageData, color, particle) {\n  var _a, _b, _c;\n  const svgColoredData = replaceColorSvg(image, color, (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1),\n    imageRes = {\n      color,\n      data: Object.assign(Object.assign({}, image), {\n        svgData: svgColoredData\n      }),\n      loaded: false,\n      ratio: imageData.width / imageData.height,\n      replaceColor: (_c = imageData.replaceColor) !== null && _c !== void 0 ? _c : imageData.replace_color,\n      source: imageData.src\n    };\n  return new Promise(resolve => {\n    const svg = new Blob([svgColoredData], {\n        type: \"image/svg+xml\"\n      }),\n      domUrl = URL || window.URL || window.webkitURL || window,\n      url = domUrl.createObjectURL(svg),\n      img = new Image();\n    img.addEventListener(\"load\", () => {\n      imageRes.loaded = true;\n      imageRes.element = img;\n      resolve(imageRes);\n      domUrl.revokeObjectURL(url);\n    });\n    img.addEventListener(\"error\", async () => {\n      domUrl.revokeObjectURL(url);\n      const img2 = Object.assign(Object.assign({}, image), {\n        error: false,\n        loading: true\n      });\n      await loadImage(img2);\n      imageRes.loaded = true;\n      imageRes.element = img2.element;\n      resolve(imageRes);\n    });\n    img.src = url;\n  });\n}","map":{"version":3,"names":["getStyleFromHsl","currentColorRegex","replaceColorSvg","imageShape","color","opacity","svgData","colorStyle","includes","replace","preFillIndex","indexOf","substring","loadImage","image","Promise","resolve","loading","img","Image","element","addEventListener","undefined","error","console","source","src","downloadSvgImage","type","response","fetch","ok","text","replaceImageColor","imageData","particle","_a","_b","_c","svgColoredData","value","imageRes","data","Object","assign","loaded","ratio","width","height","replaceColor","replace_color","svg","Blob","domUrl","URL","window","webkitURL","url","createObjectURL","revokeObjectURL","img2"],"sources":["/Users/adri22/Desktop/AVA-Bot/app-web/node_modules/tsparticles-shape-image/esm/Utils.js"],"sourcesContent":["import { getStyleFromHsl } from \"tsparticles-engine\";\nconst currentColorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\nfunction replaceColorSvg(imageShape, color, opacity) {\n    const { svgData } = imageShape;\n    if (!svgData) {\n        return \"\";\n    }\n    const colorStyle = getStyleFromHsl(color, opacity);\n    if (svgData.includes(\"fill\")) {\n        return svgData.replace(currentColorRegex, () => colorStyle);\n    }\n    const preFillIndex = svgData.indexOf(\">\");\n    return `${svgData.substring(0, preFillIndex)} fill=\"${colorStyle}\"${svgData.substring(preFillIndex)}`;\n}\nexport async function loadImage(image) {\n    return new Promise((resolve) => {\n        image.loading = true;\n        const img = new Image();\n        image.element = img;\n        img.addEventListener(\"load\", () => {\n            image.loading = false;\n            resolve();\n        });\n        img.addEventListener(\"error\", () => {\n            image.element = undefined;\n            image.error = true;\n            image.loading = false;\n            console.error(`Error tsParticles - loading image: ${image.source}`);\n            resolve();\n        });\n        img.src = image.source;\n    });\n}\nexport async function downloadSvgImage(image) {\n    if (image.type !== \"svg\") {\n        await loadImage(image);\n        return;\n    }\n    image.loading = true;\n    const response = await fetch(image.source);\n    if (!response.ok) {\n        console.error(\"Error tsParticles - Image not found\");\n        image.error = true;\n    }\n    if (!image.error) {\n        image.svgData = await response.text();\n    }\n    image.loading = false;\n}\nexport function replaceImageColor(image, imageData, color, particle) {\n    var _a, _b, _c;\n    const svgColoredData = replaceColorSvg(image, color, (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1), imageRes = {\n        color,\n        data: Object.assign(Object.assign({}, image), { svgData: svgColoredData }),\n        loaded: false,\n        ratio: imageData.width / imageData.height,\n        replaceColor: (_c = imageData.replaceColor) !== null && _c !== void 0 ? _c : imageData.replace_color,\n        source: imageData.src,\n    };\n    return new Promise((resolve) => {\n        const svg = new Blob([svgColoredData], { type: \"image/svg+xml\" }), domUrl = URL || window.URL || window.webkitURL || window, url = domUrl.createObjectURL(svg), img = new Image();\n        img.addEventListener(\"load\", () => {\n            imageRes.loaded = true;\n            imageRes.element = img;\n            resolve(imageRes);\n            domUrl.revokeObjectURL(url);\n        });\n        img.addEventListener(\"error\", async () => {\n            domUrl.revokeObjectURL(url);\n            const img2 = Object.assign(Object.assign({}, image), { error: false, loading: true });\n            await loadImage(img2);\n            imageRes.loaded = true;\n            imageRes.element = img2.element;\n            resolve(imageRes);\n        });\n        img.src = url;\n    });\n}\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,oBAAoB;AACpD,MAAMC,iBAAiB,GAAG,sGAAsG;AAChI,SAASC,eAAeA,CAACC,UAAU,EAAEC,KAAK,EAAEC,OAAO,EAAE;EACjD,MAAM;IAAEC;EAAQ,CAAC,GAAGH,UAAU;EAC9B,IAAI,CAACG,OAAO,EAAE;IACV,OAAO,EAAE;EACb;EACA,MAAMC,UAAU,GAAGP,eAAe,CAACI,KAAK,EAAEC,OAAO,CAAC;EAClD,IAAIC,OAAO,CAACE,QAAQ,CAAC,MAAM,CAAC,EAAE;IAC1B,OAAOF,OAAO,CAACG,OAAO,CAACR,iBAAiB,EAAE,MAAMM,UAAU,CAAC;EAC/D;EACA,MAAMG,YAAY,GAAGJ,OAAO,CAACK,OAAO,CAAC,GAAG,CAAC;EACzC,OAAQ,GAAEL,OAAO,CAACM,SAAS,CAAC,CAAC,EAAEF,YAAY,CAAE,UAASH,UAAW,IAAGD,OAAO,CAACM,SAAS,CAACF,YAAY,CAAE,EAAC;AACzG;AACA,OAAO,eAAeG,SAASA,CAACC,KAAK,EAAE;EACnC,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;IAC5BF,KAAK,CAACG,OAAO,GAAG,IAAI;IACpB,MAAMC,GAAG,GAAG,IAAIC,KAAK,EAAE;IACvBL,KAAK,CAACM,OAAO,GAAGF,GAAG;IACnBA,GAAG,CAACG,gBAAgB,CAAC,MAAM,EAAE,MAAM;MAC/BP,KAAK,CAACG,OAAO,GAAG,KAAK;MACrBD,OAAO,EAAE;IACb,CAAC,CAAC;IACFE,GAAG,CAACG,gBAAgB,CAAC,OAAO,EAAE,MAAM;MAChCP,KAAK,CAACM,OAAO,GAAGE,SAAS;MACzBR,KAAK,CAACS,KAAK,GAAG,IAAI;MAClBT,KAAK,CAACG,OAAO,GAAG,KAAK;MACrBO,OAAO,CAACD,KAAK,CAAE,sCAAqCT,KAAK,CAACW,MAAO,EAAC,CAAC;MACnET,OAAO,EAAE;IACb,CAAC,CAAC;IACFE,GAAG,CAACQ,GAAG,GAAGZ,KAAK,CAACW,MAAM;EAC1B,CAAC,CAAC;AACN;AACA,OAAO,eAAeE,gBAAgBA,CAACb,KAAK,EAAE;EAC1C,IAAIA,KAAK,CAACc,IAAI,KAAK,KAAK,EAAE;IACtB,MAAMf,SAAS,CAACC,KAAK,CAAC;IACtB;EACJ;EACAA,KAAK,CAACG,OAAO,GAAG,IAAI;EACpB,MAAMY,QAAQ,GAAG,MAAMC,KAAK,CAAChB,KAAK,CAACW,MAAM,CAAC;EAC1C,IAAI,CAACI,QAAQ,CAACE,EAAE,EAAE;IACdP,OAAO,CAACD,KAAK,CAAC,qCAAqC,CAAC;IACpDT,KAAK,CAACS,KAAK,GAAG,IAAI;EACtB;EACA,IAAI,CAACT,KAAK,CAACS,KAAK,EAAE;IACdT,KAAK,CAACR,OAAO,GAAG,MAAMuB,QAAQ,CAACG,IAAI,EAAE;EACzC;EACAlB,KAAK,CAACG,OAAO,GAAG,KAAK;AACzB;AACA,OAAO,SAASgB,iBAAiBA,CAACnB,KAAK,EAAEoB,SAAS,EAAE9B,KAAK,EAAE+B,QAAQ,EAAE;EACjE,IAAIC,EAAE,EAAEC,EAAE,EAAEC,EAAE;EACd,MAAMC,cAAc,GAAGrC,eAAe,CAACY,KAAK,EAAEV,KAAK,EAAE,CAACiC,EAAE,GAAG,CAACD,EAAE,GAAGD,QAAQ,CAAC9B,OAAO,MAAM,IAAI,IAAI+B,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACI,KAAK,MAAM,IAAI,IAAIH,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC,CAAC;IAAEI,QAAQ,GAAG;MAC9KrC,KAAK;MACLsC,IAAI,EAAEC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE9B,KAAK,CAAC,EAAE;QAAER,OAAO,EAAEiC;MAAe,CAAC,CAAC;MAC1EM,MAAM,EAAE,KAAK;MACbC,KAAK,EAAEZ,SAAS,CAACa,KAAK,GAAGb,SAAS,CAACc,MAAM;MACzCC,YAAY,EAAE,CAACX,EAAE,GAAGJ,SAAS,CAACe,YAAY,MAAM,IAAI,IAAIX,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGJ,SAAS,CAACgB,aAAa;MACpGzB,MAAM,EAAES,SAAS,CAACR;IACtB,CAAC;EACD,OAAO,IAAIX,OAAO,CAAEC,OAAO,IAAK;IAC5B,MAAMmC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAACb,cAAc,CAAC,EAAE;QAAEX,IAAI,EAAE;MAAgB,CAAC,CAAC;MAAEyB,MAAM,GAAGC,GAAG,IAAIC,MAAM,CAACD,GAAG,IAAIC,MAAM,CAACC,SAAS,IAAID,MAAM;MAAEE,GAAG,GAAGJ,MAAM,CAACK,eAAe,CAACP,GAAG,CAAC;MAAEjC,GAAG,GAAG,IAAIC,KAAK,EAAE;IACjLD,GAAG,CAACG,gBAAgB,CAAC,MAAM,EAAE,MAAM;MAC/BoB,QAAQ,CAACI,MAAM,GAAG,IAAI;MACtBJ,QAAQ,CAACrB,OAAO,GAAGF,GAAG;MACtBF,OAAO,CAACyB,QAAQ,CAAC;MACjBY,MAAM,CAACM,eAAe,CAACF,GAAG,CAAC;IAC/B,CAAC,CAAC;IACFvC,GAAG,CAACG,gBAAgB,CAAC,OAAO,EAAE,YAAY;MACtCgC,MAAM,CAACM,eAAe,CAACF,GAAG,CAAC;MAC3B,MAAMG,IAAI,GAAGjB,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE9B,KAAK,CAAC,EAAE;QAAES,KAAK,EAAE,KAAK;QAAEN,OAAO,EAAE;MAAK,CAAC,CAAC;MACrF,MAAMJ,SAAS,CAAC+C,IAAI,CAAC;MACrBnB,QAAQ,CAACI,MAAM,GAAG,IAAI;MACtBJ,QAAQ,CAACrB,OAAO,GAAGwC,IAAI,CAACxC,OAAO;MAC/BJ,OAAO,CAACyB,QAAQ,CAAC;IACrB,CAAC,CAAC;IACFvB,GAAG,CAACQ,GAAG,GAAG+B,GAAG;EACjB,CAAC,CAAC;AACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}